Grammar:

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> statement
Rule 4     statement -> block
Rule 5     statement -> keyword_statement ;
Rule 6     statement -> print_statement ;
Rule 7     statement -> assignment ;
Rule 8     statement -> while_loop
Rule 9     statement -> for_loop
Rule 10    statement -> if_statement
Rule 11    block -> { statements }
Rule 12    if_statement -> IF ( condition ) statement ELSE statement  [precedence=nonassoc, level=9]
Rule 13    if_statement -> IF ( condition ) statement  [precedence=nonassoc, level=8]
Rule 14    assignment -> reference ASSIGN expr
Rule 15    assignment -> reference DIVIDE_BY expr
Rule 16    assignment -> reference MULTIPLY_BY expr
Rule 17    assignment -> reference SUBTRACT expr
Rule 18    assignment -> reference ADD expr
Rule 19    assignment -> id ASSIGN expr
Rule 20    assignment -> id DIVIDE_BY expr
Rule 21    assignment -> id MULTIPLY_BY expr
Rule 22    assignment -> id SUBTRACT expr
Rule 23    assignment -> id ADD expr
Rule 24    for_loop -> FOR id ASSIGN range_expr statement
Rule 25    range_expr -> expr RANGE expr
Rule 26    while_loop -> WHILE ( condition ) statement
Rule 27    print_statement -> PRINT expr
Rule 28    print_statement -> PRINT terms
Rule 29    keyword_statement -> RETURN expr
Rule 30    keyword_statement -> CONTINUE
Rule 31    keyword_statement -> BREAK
Rule 32    condition -> expr NE expr  [precedence=left, level=2]
Rule 33    condition -> expr GT expr  [precedence=left, level=1]
Rule 34    condition -> expr GE expr  [precedence=left, level=2]
Rule 35    condition -> expr LT expr  [precedence=left, level=1]
Rule 36    condition -> expr LE expr  [precedence=left, level=2]
Rule 37    condition -> expr EQ expr  [precedence=left, level=2]
Rule 38    expr -> ( expr )
Rule 39    expr -> - expr  [precedence=left, level=7]
Rule 40    expr -> matrix_expr
Rule 41    expr -> arithmetic_expr
Rule 42    expr -> term
Rule 43    arithmetic_expr -> expr / expr  [precedence=left, level=5]
Rule 44    arithmetic_expr -> expr * expr  [precedence=left, level=5]
Rule 45    arithmetic_expr -> expr - expr  [precedence=left, level=3]
Rule 46    arithmetic_expr -> expr + expr  [precedence=left, level=3]
Rule 47    matrix_expr -> expr MATRIX_DIV expr  [precedence=left, level=6]
Rule 48    matrix_expr -> expr MATRIX_MUL expr  [precedence=left, level=6]
Rule 49    matrix_expr -> expr MATRIX_MINUS expr  [precedence=left, level=4]
Rule 50    matrix_expr -> expr MATRIX_PLUS expr  [precedence=left, level=4]
Rule 51    matrix -> matrix TRANSPOSE
Rule 52    matrix -> ONES ( expr )
Rule 53    matrix -> ZEROS ( expr )
Rule 54    matrix -> EYE ( expr )
Rule 55    matrix -> ONES ( terms )
Rule 56    matrix -> ZEROS ( terms )
Rule 57    matrix -> EYE ( terms )
Rule 58    list -> [ terms ]
Rule 59    terms -> term , terms
Rule 60    terms -> term
Rule 61    term -> id TRANSPOSE
Rule 62    term -> string
Rule 63    term -> id
Rule 64    term -> matrix
Rule 65    term -> list
Rule 66    term -> numeric
Rule 67    term -> reference
Rule 68    reference -> id list
Rule 69    id -> ID
Rule 70    numeric -> FLOAT
Rule 71    numeric -> INTEGER
Rule 72    string -> STRING

Terminals, with rules where they appear:

(                    : 12 13 26 38 52 53 54 55 56 57
)                    : 12 13 26 38 52 53 54 55 56 57
*                    : 44
+                    : 46
,                    : 59
-                    : 39 45
/                    : 43
;                    : 5 6 7
ADD                  : 18 23
ASSIGN               : 14 19 24
BREAK                : 31
CONTINUE             : 30
DIVIDE_BY            : 15 20
ELSE                 : 12
EQ                   : 37
EYE                  : 54 57
FLOAT                : 70
FOR                  : 24
GE                   : 34
GT                   : 33
ID                   : 69
IF                   : 12 13
INTEGER              : 71
LE                   : 36
LT                   : 35
MATRIX_DIV           : 47
MATRIX_MINUS         : 49
MATRIX_MUL           : 48
MATRIX_PLUS          : 50
MULTIPLY_BY          : 16 21
NE                   : 32
ONES                 : 52 55
PRINT                : 27 28
RANGE                : 25
RETURN               : 29
STRING               : 72
SUBTRACT             : 17 22
TRANSPOSE            : 51 61
WHILE                : 26
ZEROS                : 53 56
[                    : 58
]                    : 58
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

arithmetic_expr      : 41
assignment           : 7
block                : 4
condition            : 12 13 26
expr                 : 14 15 16 17 18 19 20 21 22 23 25 25 27 29 32 32 33 33 34 34 35 35 36 36 37 37 38 39 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 52 53 54
for_loop             : 9
id                   : 19 20 21 22 23 24 61 63 68
if_statement         : 10
keyword_statement    : 5
list                 : 65 68
matrix               : 51 64
matrix_expr          : 40
numeric              : 66
print_statement      : 6
program              : 0
range_expr           : 24
reference            : 14 15 16 17 18 67
statement            : 2 3 12 12 13 24 26
statements           : 1 2 11
string               : 62
term                 : 42 59 60
terms                : 28 55 56 57 58 59
while_loop           : 8


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 1

    (0) S' -> program .


state 2

    (1) program -> statements .
    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . statements
    (3) statements -> statement .
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    statement                      shift and go to state 3
    statements                     shift and go to state 22
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 4

    (4) statement -> block .
    {               reduce using rule 4 (statement -> block .)
    RETURN          reduce using rule 4 (statement -> block .)
    CONTINUE        reduce using rule 4 (statement -> block .)
    BREAK           reduce using rule 4 (statement -> block .)
    PRINT           reduce using rule 4 (statement -> block .)
    WHILE           reduce using rule 4 (statement -> block .)
    FOR             reduce using rule 4 (statement -> block .)
    IF              reduce using rule 4 (statement -> block .)
    ID              reduce using rule 4 (statement -> block .)
    $end            reduce using rule 4 (statement -> block .)
    }               reduce using rule 4 (statement -> block .)
    ELSE            reduce using rule 4 (statement -> block .)


state 5

    (5) statement -> keyword_statement . ;
    ;               shift and go to state 23


state 6

    (6) statement -> print_statement . ;
    ;               shift and go to state 24


state 7

    (7) statement -> assignment . ;
    ;               shift and go to state 25


state 8

    (8) statement -> while_loop .
    {               reduce using rule 8 (statement -> while_loop .)
    RETURN          reduce using rule 8 (statement -> while_loop .)
    CONTINUE        reduce using rule 8 (statement -> while_loop .)
    BREAK           reduce using rule 8 (statement -> while_loop .)
    PRINT           reduce using rule 8 (statement -> while_loop .)
    WHILE           reduce using rule 8 (statement -> while_loop .)
    FOR             reduce using rule 8 (statement -> while_loop .)
    IF              reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    }               reduce using rule 8 (statement -> while_loop .)
    ELSE            reduce using rule 8 (statement -> while_loop .)


state 9

    (9) statement -> for_loop .
    {               reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    CONTINUE        reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    PRINT           reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)
    ELSE            reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> if_statement .
    {               reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)
    CONTINUE        reduce using rule 10 (statement -> if_statement .)
    BREAK           reduce using rule 10 (statement -> if_statement .)
    PRINT           reduce using rule 10 (statement -> if_statement .)
    WHILE           reduce using rule 10 (statement -> if_statement .)
    FOR             reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    ID              reduce using rule 10 (statement -> if_statement .)
    $end            reduce using rule 10 (statement -> if_statement .)
    }               reduce using rule 10 (statement -> if_statement .)
    ELSE            reduce using rule 10 (statement -> if_statement .)


state 11

    (11) block -> { . statements }
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    statements                     shift and go to state 26
    statement                      shift and go to state 3
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 12

    (29) keyword_statement -> RETURN . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 27
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 13

    (30) keyword_statement -> CONTINUE .
    ;               reduce using rule 30 (keyword_statement -> CONTINUE .)


state 14

    (31) keyword_statement -> BREAK .
    ;               reduce using rule 31 (keyword_statement -> BREAK .)


state 15

    (27) print_statement -> PRINT . expr
    (28) print_statement -> PRINT . terms
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (59) terms -> . term , terms
    (60) terms -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 46
    terms                          shift and go to state 47
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 48
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 16

    (14) assignment -> reference . ASSIGN expr
    (15) assignment -> reference . DIVIDE_BY expr
    (16) assignment -> reference . MULTIPLY_BY expr
    (17) assignment -> reference . SUBTRACT expr
    (18) assignment -> reference . ADD expr
    ASSIGN          shift and go to state 49
    DIVIDE_BY       shift and go to state 50
    MULTIPLY_BY     shift and go to state 51
    SUBTRACT        shift and go to state 52
    ADD             shift and go to state 53


state 17

    (19) assignment -> id . ASSIGN expr
    (20) assignment -> id . DIVIDE_BY expr
    (21) assignment -> id . MULTIPLY_BY expr
    (22) assignment -> id . SUBTRACT expr
    (23) assignment -> id . ADD expr
    (68) reference -> id . list
    (58) list -> . [ terms ]
    ASSIGN          shift and go to state 54
    DIVIDE_BY       shift and go to state 55
    MULTIPLY_BY     shift and go to state 56
    SUBTRACT        shift and go to state 57
    ADD             shift and go to state 58
    [               shift and go to state 43

    list                           shift and go to state 59

state 18

    (26) while_loop -> WHILE . ( condition ) statement
    (               shift and go to state 60


state 19

    (24) for_loop -> FOR . id ASSIGN range_expr statement
    (69) id -> . ID
    ID              shift and go to state 21

    id                             shift and go to state 61

state 20

    (12) if_statement -> IF . ( condition ) statement ELSE statement
    (13) if_statement -> IF . ( condition ) statement
    (               shift and go to state 62


state 21

    (69) id -> ID .
    ASSIGN          reduce using rule 69 (id -> ID .)
    DIVIDE_BY       reduce using rule 69 (id -> ID .)
    MULTIPLY_BY     reduce using rule 69 (id -> ID .)
    SUBTRACT        reduce using rule 69 (id -> ID .)
    ADD             reduce using rule 69 (id -> ID .)
    [               reduce using rule 69 (id -> ID .)
    TRANSPOSE       reduce using rule 69 (id -> ID .)
    MATRIX_DIV      reduce using rule 69 (id -> ID .)
    MATRIX_MUL      reduce using rule 69 (id -> ID .)
    MATRIX_MINUS    reduce using rule 69 (id -> ID .)
    MATRIX_PLUS     reduce using rule 69 (id -> ID .)
    /               reduce using rule 69 (id -> ID .)
    *               reduce using rule 69 (id -> ID .)
    -               reduce using rule 69 (id -> ID .)
    +               reduce using rule 69 (id -> ID .)
    ;               reduce using rule 69 (id -> ID .)
    ,               reduce using rule 69 (id -> ID .)
    )               reduce using rule 69 (id -> ID .)
    NE              reduce using rule 69 (id -> ID .)
    GT              reduce using rule 69 (id -> ID .)
    GE              reduce using rule 69 (id -> ID .)
    LT              reduce using rule 69 (id -> ID .)
    LE              reduce using rule 69 (id -> ID .)
    EQ              reduce using rule 69 (id -> ID .)
    RANGE           reduce using rule 69 (id -> ID .)
    {               reduce using rule 69 (id -> ID .)
    RETURN          reduce using rule 69 (id -> ID .)
    CONTINUE        reduce using rule 69 (id -> ID .)
    BREAK           reduce using rule 69 (id -> ID .)
    PRINT           reduce using rule 69 (id -> ID .)
    WHILE           reduce using rule 69 (id -> ID .)
    FOR             reduce using rule 69 (id -> ID .)
    IF              reduce using rule 69 (id -> ID .)
    ID              reduce using rule 69 (id -> ID .)
    ]               reduce using rule 69 (id -> ID .)


state 22

    (2) statements -> statement statements .
    $end            reduce using rule 2 (statements -> statement statements .)
    }               reduce using rule 2 (statements -> statement statements .)


state 23

    (5) statement -> keyword_statement ; .
    {               reduce using rule 5 (statement -> keyword_statement ; .)
    RETURN          reduce using rule 5 (statement -> keyword_statement ; .)
    CONTINUE        reduce using rule 5 (statement -> keyword_statement ; .)
    BREAK           reduce using rule 5 (statement -> keyword_statement ; .)
    PRINT           reduce using rule 5 (statement -> keyword_statement ; .)
    WHILE           reduce using rule 5 (statement -> keyword_statement ; .)
    FOR             reduce using rule 5 (statement -> keyword_statement ; .)
    IF              reduce using rule 5 (statement -> keyword_statement ; .)
    ID              reduce using rule 5 (statement -> keyword_statement ; .)
    $end            reduce using rule 5 (statement -> keyword_statement ; .)
    }               reduce using rule 5 (statement -> keyword_statement ; .)
    ELSE            reduce using rule 5 (statement -> keyword_statement ; .)


state 24

    (6) statement -> print_statement ; .
    {               reduce using rule 6 (statement -> print_statement ; .)
    RETURN          reduce using rule 6 (statement -> print_statement ; .)
    CONTINUE        reduce using rule 6 (statement -> print_statement ; .)
    BREAK           reduce using rule 6 (statement -> print_statement ; .)
    PRINT           reduce using rule 6 (statement -> print_statement ; .)
    WHILE           reduce using rule 6 (statement -> print_statement ; .)
    FOR             reduce using rule 6 (statement -> print_statement ; .)
    IF              reduce using rule 6 (statement -> print_statement ; .)
    ID              reduce using rule 6 (statement -> print_statement ; .)
    $end            reduce using rule 6 (statement -> print_statement ; .)
    }               reduce using rule 6 (statement -> print_statement ; .)
    ELSE            reduce using rule 6 (statement -> print_statement ; .)


state 25

    (7) statement -> assignment ; .
    {               reduce using rule 7 (statement -> assignment ; .)
    RETURN          reduce using rule 7 (statement -> assignment ; .)
    CONTINUE        reduce using rule 7 (statement -> assignment ; .)
    BREAK           reduce using rule 7 (statement -> assignment ; .)
    PRINT           reduce using rule 7 (statement -> assignment ; .)
    WHILE           reduce using rule 7 (statement -> assignment ; .)
    FOR             reduce using rule 7 (statement -> assignment ; .)
    IF              reduce using rule 7 (statement -> assignment ; .)
    ID              reduce using rule 7 (statement -> assignment ; .)
    $end            reduce using rule 7 (statement -> assignment ; .)
    }               reduce using rule 7 (statement -> assignment ; .)
    ELSE            reduce using rule 7 (statement -> assignment ; .)


state 26

    (11) block -> { statements . }
    }               shift and go to state 63


state 27

    (29) keyword_statement -> RETURN expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 29 (keyword_statement -> RETURN expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 28

    (38) expr -> ( . expr )
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 72
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 29

    (39) expr -> - . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 73
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 30

    (40) expr -> matrix_expr .
    MATRIX_DIV      reduce using rule 40 (expr -> matrix_expr .)
    MATRIX_MUL      reduce using rule 40 (expr -> matrix_expr .)
    MATRIX_MINUS    reduce using rule 40 (expr -> matrix_expr .)
    MATRIX_PLUS     reduce using rule 40 (expr -> matrix_expr .)
    /               reduce using rule 40 (expr -> matrix_expr .)
    *               reduce using rule 40 (expr -> matrix_expr .)
    -               reduce using rule 40 (expr -> matrix_expr .)
    +               reduce using rule 40 (expr -> matrix_expr .)
    ;               reduce using rule 40 (expr -> matrix_expr .)
    )               reduce using rule 40 (expr -> matrix_expr .)
    NE              reduce using rule 40 (expr -> matrix_expr .)
    GT              reduce using rule 40 (expr -> matrix_expr .)
    GE              reduce using rule 40 (expr -> matrix_expr .)
    LT              reduce using rule 40 (expr -> matrix_expr .)
    LE              reduce using rule 40 (expr -> matrix_expr .)
    EQ              reduce using rule 40 (expr -> matrix_expr .)
    RANGE           reduce using rule 40 (expr -> matrix_expr .)
    {               reduce using rule 40 (expr -> matrix_expr .)
    RETURN          reduce using rule 40 (expr -> matrix_expr .)
    CONTINUE        reduce using rule 40 (expr -> matrix_expr .)
    BREAK           reduce using rule 40 (expr -> matrix_expr .)
    PRINT           reduce using rule 40 (expr -> matrix_expr .)
    WHILE           reduce using rule 40 (expr -> matrix_expr .)
    FOR             reduce using rule 40 (expr -> matrix_expr .)
    IF              reduce using rule 40 (expr -> matrix_expr .)
    ID              reduce using rule 40 (expr -> matrix_expr .)


state 31

    (41) expr -> arithmetic_expr .
    MATRIX_DIV      reduce using rule 41 (expr -> arithmetic_expr .)
    MATRIX_MUL      reduce using rule 41 (expr -> arithmetic_expr .)
    MATRIX_MINUS    reduce using rule 41 (expr -> arithmetic_expr .)
    MATRIX_PLUS     reduce using rule 41 (expr -> arithmetic_expr .)
    /               reduce using rule 41 (expr -> arithmetic_expr .)
    *               reduce using rule 41 (expr -> arithmetic_expr .)
    -               reduce using rule 41 (expr -> arithmetic_expr .)
    +               reduce using rule 41 (expr -> arithmetic_expr .)
    ;               reduce using rule 41 (expr -> arithmetic_expr .)
    )               reduce using rule 41 (expr -> arithmetic_expr .)
    NE              reduce using rule 41 (expr -> arithmetic_expr .)
    GT              reduce using rule 41 (expr -> arithmetic_expr .)
    GE              reduce using rule 41 (expr -> arithmetic_expr .)
    LT              reduce using rule 41 (expr -> arithmetic_expr .)
    LE              reduce using rule 41 (expr -> arithmetic_expr .)
    EQ              reduce using rule 41 (expr -> arithmetic_expr .)
    RANGE           reduce using rule 41 (expr -> arithmetic_expr .)
    {               reduce using rule 41 (expr -> arithmetic_expr .)
    RETURN          reduce using rule 41 (expr -> arithmetic_expr .)
    CONTINUE        reduce using rule 41 (expr -> arithmetic_expr .)
    BREAK           reduce using rule 41 (expr -> arithmetic_expr .)
    PRINT           reduce using rule 41 (expr -> arithmetic_expr .)
    WHILE           reduce using rule 41 (expr -> arithmetic_expr .)
    FOR             reduce using rule 41 (expr -> arithmetic_expr .)
    IF              reduce using rule 41 (expr -> arithmetic_expr .)
    ID              reduce using rule 41 (expr -> arithmetic_expr .)


state 32

    (42) expr -> term .
    MATRIX_DIV      reduce using rule 42 (expr -> term .)
    MATRIX_MUL      reduce using rule 42 (expr -> term .)
    MATRIX_MINUS    reduce using rule 42 (expr -> term .)
    MATRIX_PLUS     reduce using rule 42 (expr -> term .)
    /               reduce using rule 42 (expr -> term .)
    *               reduce using rule 42 (expr -> term .)
    -               reduce using rule 42 (expr -> term .)
    +               reduce using rule 42 (expr -> term .)
    ;               reduce using rule 42 (expr -> term .)
    )               reduce using rule 42 (expr -> term .)
    NE              reduce using rule 42 (expr -> term .)
    GT              reduce using rule 42 (expr -> term .)
    GE              reduce using rule 42 (expr -> term .)
    LT              reduce using rule 42 (expr -> term .)
    LE              reduce using rule 42 (expr -> term .)
    EQ              reduce using rule 42 (expr -> term .)
    RANGE           reduce using rule 42 (expr -> term .)
    {               reduce using rule 42 (expr -> term .)
    RETURN          reduce using rule 42 (expr -> term .)
    CONTINUE        reduce using rule 42 (expr -> term .)
    BREAK           reduce using rule 42 (expr -> term .)
    PRINT           reduce using rule 42 (expr -> term .)
    WHILE           reduce using rule 42 (expr -> term .)
    FOR             reduce using rule 42 (expr -> term .)
    IF              reduce using rule 42 (expr -> term .)
    ID              reduce using rule 42 (expr -> term .)


state 33

    (61) term -> id . TRANSPOSE
    (63) term -> id .
    (68) reference -> id . list
    (58) list -> . [ terms ]
    TRANSPOSE       shift and go to state 74
    MATRIX_DIV      reduce using rule 63 (term -> id .)
    MATRIX_MUL      reduce using rule 63 (term -> id .)
    MATRIX_MINUS    reduce using rule 63 (term -> id .)
    MATRIX_PLUS     reduce using rule 63 (term -> id .)
    /               reduce using rule 63 (term -> id .)
    *               reduce using rule 63 (term -> id .)
    -               reduce using rule 63 (term -> id .)
    +               reduce using rule 63 (term -> id .)
    ;               reduce using rule 63 (term -> id .)
    ,               reduce using rule 63 (term -> id .)
    )               reduce using rule 63 (term -> id .)
    NE              reduce using rule 63 (term -> id .)
    GT              reduce using rule 63 (term -> id .)
    GE              reduce using rule 63 (term -> id .)
    LT              reduce using rule 63 (term -> id .)
    LE              reduce using rule 63 (term -> id .)
    EQ              reduce using rule 63 (term -> id .)
    RANGE           reduce using rule 63 (term -> id .)
    {               reduce using rule 63 (term -> id .)
    RETURN          reduce using rule 63 (term -> id .)
    CONTINUE        reduce using rule 63 (term -> id .)
    BREAK           reduce using rule 63 (term -> id .)
    PRINT           reduce using rule 63 (term -> id .)
    WHILE           reduce using rule 63 (term -> id .)
    FOR             reduce using rule 63 (term -> id .)
    IF              reduce using rule 63 (term -> id .)
    ID              reduce using rule 63 (term -> id .)
    ]               reduce using rule 63 (term -> id .)
    [               shift and go to state 43

    list                           shift and go to state 59

state 34

    (62) term -> string .
    MATRIX_DIV      reduce using rule 62 (term -> string .)
    MATRIX_MUL      reduce using rule 62 (term -> string .)
    MATRIX_MINUS    reduce using rule 62 (term -> string .)
    MATRIX_PLUS     reduce using rule 62 (term -> string .)
    /               reduce using rule 62 (term -> string .)
    *               reduce using rule 62 (term -> string .)
    -               reduce using rule 62 (term -> string .)
    +               reduce using rule 62 (term -> string .)
    ;               reduce using rule 62 (term -> string .)
    ,               reduce using rule 62 (term -> string .)
    )               reduce using rule 62 (term -> string .)
    NE              reduce using rule 62 (term -> string .)
    GT              reduce using rule 62 (term -> string .)
    GE              reduce using rule 62 (term -> string .)
    LT              reduce using rule 62 (term -> string .)
    LE              reduce using rule 62 (term -> string .)
    EQ              reduce using rule 62 (term -> string .)
    RANGE           reduce using rule 62 (term -> string .)
    {               reduce using rule 62 (term -> string .)
    RETURN          reduce using rule 62 (term -> string .)
    CONTINUE        reduce using rule 62 (term -> string .)
    BREAK           reduce using rule 62 (term -> string .)
    PRINT           reduce using rule 62 (term -> string .)
    WHILE           reduce using rule 62 (term -> string .)
    FOR             reduce using rule 62 (term -> string .)
    IF              reduce using rule 62 (term -> string .)
    ID              reduce using rule 62 (term -> string .)
    ]               reduce using rule 62 (term -> string .)


state 35

    (64) term -> matrix .
    (51) matrix -> matrix . TRANSPOSE
    MATRIX_DIV      reduce using rule 64 (term -> matrix .)
    MATRIX_MUL      reduce using rule 64 (term -> matrix .)
    MATRIX_MINUS    reduce using rule 64 (term -> matrix .)
    MATRIX_PLUS     reduce using rule 64 (term -> matrix .)
    /               reduce using rule 64 (term -> matrix .)
    *               reduce using rule 64 (term -> matrix .)
    -               reduce using rule 64 (term -> matrix .)
    +               reduce using rule 64 (term -> matrix .)
    ;               reduce using rule 64 (term -> matrix .)
    ,               reduce using rule 64 (term -> matrix .)
    )               reduce using rule 64 (term -> matrix .)
    NE              reduce using rule 64 (term -> matrix .)
    GT              reduce using rule 64 (term -> matrix .)
    GE              reduce using rule 64 (term -> matrix .)
    LT              reduce using rule 64 (term -> matrix .)
    LE              reduce using rule 64 (term -> matrix .)
    EQ              reduce using rule 64 (term -> matrix .)
    RANGE           reduce using rule 64 (term -> matrix .)
    {               reduce using rule 64 (term -> matrix .)
    RETURN          reduce using rule 64 (term -> matrix .)
    CONTINUE        reduce using rule 64 (term -> matrix .)
    BREAK           reduce using rule 64 (term -> matrix .)
    PRINT           reduce using rule 64 (term -> matrix .)
    WHILE           reduce using rule 64 (term -> matrix .)
    FOR             reduce using rule 64 (term -> matrix .)
    IF              reduce using rule 64 (term -> matrix .)
    ID              reduce using rule 64 (term -> matrix .)
    ]               reduce using rule 64 (term -> matrix .)
    TRANSPOSE       shift and go to state 75


state 36

    (65) term -> list .
    MATRIX_DIV      reduce using rule 65 (term -> list .)
    MATRIX_MUL      reduce using rule 65 (term -> list .)
    MATRIX_MINUS    reduce using rule 65 (term -> list .)
    MATRIX_PLUS     reduce using rule 65 (term -> list .)
    /               reduce using rule 65 (term -> list .)
    *               reduce using rule 65 (term -> list .)
    -               reduce using rule 65 (term -> list .)
    +               reduce using rule 65 (term -> list .)
    ;               reduce using rule 65 (term -> list .)
    ,               reduce using rule 65 (term -> list .)
    )               reduce using rule 65 (term -> list .)
    NE              reduce using rule 65 (term -> list .)
    GT              reduce using rule 65 (term -> list .)
    GE              reduce using rule 65 (term -> list .)
    LT              reduce using rule 65 (term -> list .)
    LE              reduce using rule 65 (term -> list .)
    EQ              reduce using rule 65 (term -> list .)
    RANGE           reduce using rule 65 (term -> list .)
    {               reduce using rule 65 (term -> list .)
    RETURN          reduce using rule 65 (term -> list .)
    CONTINUE        reduce using rule 65 (term -> list .)
    BREAK           reduce using rule 65 (term -> list .)
    PRINT           reduce using rule 65 (term -> list .)
    WHILE           reduce using rule 65 (term -> list .)
    FOR             reduce using rule 65 (term -> list .)
    IF              reduce using rule 65 (term -> list .)
    ID              reduce using rule 65 (term -> list .)
    ]               reduce using rule 65 (term -> list .)


state 37

    (66) term -> numeric .
    MATRIX_DIV      reduce using rule 66 (term -> numeric .)
    MATRIX_MUL      reduce using rule 66 (term -> numeric .)
    MATRIX_MINUS    reduce using rule 66 (term -> numeric .)
    MATRIX_PLUS     reduce using rule 66 (term -> numeric .)
    /               reduce using rule 66 (term -> numeric .)
    *               reduce using rule 66 (term -> numeric .)
    -               reduce using rule 66 (term -> numeric .)
    +               reduce using rule 66 (term -> numeric .)
    ;               reduce using rule 66 (term -> numeric .)
    ,               reduce using rule 66 (term -> numeric .)
    )               reduce using rule 66 (term -> numeric .)
    NE              reduce using rule 66 (term -> numeric .)
    GT              reduce using rule 66 (term -> numeric .)
    GE              reduce using rule 66 (term -> numeric .)
    LT              reduce using rule 66 (term -> numeric .)
    LE              reduce using rule 66 (term -> numeric .)
    EQ              reduce using rule 66 (term -> numeric .)
    RANGE           reduce using rule 66 (term -> numeric .)
    {               reduce using rule 66 (term -> numeric .)
    RETURN          reduce using rule 66 (term -> numeric .)
    CONTINUE        reduce using rule 66 (term -> numeric .)
    BREAK           reduce using rule 66 (term -> numeric .)
    PRINT           reduce using rule 66 (term -> numeric .)
    WHILE           reduce using rule 66 (term -> numeric .)
    FOR             reduce using rule 66 (term -> numeric .)
    IF              reduce using rule 66 (term -> numeric .)
    ID              reduce using rule 66 (term -> numeric .)
    ]               reduce using rule 66 (term -> numeric .)


state 38

    (67) term -> reference .
    MATRIX_DIV      reduce using rule 67 (term -> reference .)
    MATRIX_MUL      reduce using rule 67 (term -> reference .)
    MATRIX_MINUS    reduce using rule 67 (term -> reference .)
    MATRIX_PLUS     reduce using rule 67 (term -> reference .)
    /               reduce using rule 67 (term -> reference .)
    *               reduce using rule 67 (term -> reference .)
    -               reduce using rule 67 (term -> reference .)
    +               reduce using rule 67 (term -> reference .)
    ;               reduce using rule 67 (term -> reference .)
    ,               reduce using rule 67 (term -> reference .)
    )               reduce using rule 67 (term -> reference .)
    NE              reduce using rule 67 (term -> reference .)
    GT              reduce using rule 67 (term -> reference .)
    GE              reduce using rule 67 (term -> reference .)
    LT              reduce using rule 67 (term -> reference .)
    LE              reduce using rule 67 (term -> reference .)
    EQ              reduce using rule 67 (term -> reference .)
    RANGE           reduce using rule 67 (term -> reference .)
    {               reduce using rule 67 (term -> reference .)
    RETURN          reduce using rule 67 (term -> reference .)
    CONTINUE        reduce using rule 67 (term -> reference .)
    BREAK           reduce using rule 67 (term -> reference .)
    PRINT           reduce using rule 67 (term -> reference .)
    WHILE           reduce using rule 67 (term -> reference .)
    FOR             reduce using rule 67 (term -> reference .)
    IF              reduce using rule 67 (term -> reference .)
    ID              reduce using rule 67 (term -> reference .)
    ]               reduce using rule 67 (term -> reference .)


state 39

    (72) string -> STRING .
    MATRIX_DIV      reduce using rule 72 (string -> STRING .)
    MATRIX_MUL      reduce using rule 72 (string -> STRING .)
    MATRIX_MINUS    reduce using rule 72 (string -> STRING .)
    MATRIX_PLUS     reduce using rule 72 (string -> STRING .)
    /               reduce using rule 72 (string -> STRING .)
    *               reduce using rule 72 (string -> STRING .)
    -               reduce using rule 72 (string -> STRING .)
    +               reduce using rule 72 (string -> STRING .)
    ;               reduce using rule 72 (string -> STRING .)
    ,               reduce using rule 72 (string -> STRING .)
    )               reduce using rule 72 (string -> STRING .)
    NE              reduce using rule 72 (string -> STRING .)
    GT              reduce using rule 72 (string -> STRING .)
    GE              reduce using rule 72 (string -> STRING .)
    LT              reduce using rule 72 (string -> STRING .)
    LE              reduce using rule 72 (string -> STRING .)
    EQ              reduce using rule 72 (string -> STRING .)
    RANGE           reduce using rule 72 (string -> STRING .)
    {               reduce using rule 72 (string -> STRING .)
    RETURN          reduce using rule 72 (string -> STRING .)
    CONTINUE        reduce using rule 72 (string -> STRING .)
    BREAK           reduce using rule 72 (string -> STRING .)
    PRINT           reduce using rule 72 (string -> STRING .)
    WHILE           reduce using rule 72 (string -> STRING .)
    FOR             reduce using rule 72 (string -> STRING .)
    IF              reduce using rule 72 (string -> STRING .)
    ID              reduce using rule 72 (string -> STRING .)
    ]               reduce using rule 72 (string -> STRING .)


state 40

    (52) matrix -> ONES . ( expr )
    (55) matrix -> ONES . ( terms )
    (               shift and go to state 76


state 41

    (53) matrix -> ZEROS . ( expr )
    (56) matrix -> ZEROS . ( terms )
    (               shift and go to state 77


state 42

    (54) matrix -> EYE . ( expr )
    (57) matrix -> EYE . ( terms )
    (               shift and go to state 78


state 43

    (58) list -> [ . terms ]
    (59) terms -> . term , terms
    (60) terms -> . term
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    terms                          shift and go to state 79
    term                           shift and go to state 80
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 44

    (70) numeric -> FLOAT .
    MATRIX_DIV      reduce using rule 70 (numeric -> FLOAT .)
    MATRIX_MUL      reduce using rule 70 (numeric -> FLOAT .)
    MATRIX_MINUS    reduce using rule 70 (numeric -> FLOAT .)
    MATRIX_PLUS     reduce using rule 70 (numeric -> FLOAT .)
    /               reduce using rule 70 (numeric -> FLOAT .)
    *               reduce using rule 70 (numeric -> FLOAT .)
    -               reduce using rule 70 (numeric -> FLOAT .)
    +               reduce using rule 70 (numeric -> FLOAT .)
    ;               reduce using rule 70 (numeric -> FLOAT .)
    ,               reduce using rule 70 (numeric -> FLOAT .)
    )               reduce using rule 70 (numeric -> FLOAT .)
    NE              reduce using rule 70 (numeric -> FLOAT .)
    GT              reduce using rule 70 (numeric -> FLOAT .)
    GE              reduce using rule 70 (numeric -> FLOAT .)
    LT              reduce using rule 70 (numeric -> FLOAT .)
    LE              reduce using rule 70 (numeric -> FLOAT .)
    EQ              reduce using rule 70 (numeric -> FLOAT .)
    RANGE           reduce using rule 70 (numeric -> FLOAT .)
    {               reduce using rule 70 (numeric -> FLOAT .)
    RETURN          reduce using rule 70 (numeric -> FLOAT .)
    CONTINUE        reduce using rule 70 (numeric -> FLOAT .)
    BREAK           reduce using rule 70 (numeric -> FLOAT .)
    PRINT           reduce using rule 70 (numeric -> FLOAT .)
    WHILE           reduce using rule 70 (numeric -> FLOAT .)
    FOR             reduce using rule 70 (numeric -> FLOAT .)
    IF              reduce using rule 70 (numeric -> FLOAT .)
    ID              reduce using rule 70 (numeric -> FLOAT .)
    ]               reduce using rule 70 (numeric -> FLOAT .)


state 45

    (71) numeric -> INTEGER .
    MATRIX_DIV      reduce using rule 71 (numeric -> INTEGER .)
    MATRIX_MUL      reduce using rule 71 (numeric -> INTEGER .)
    MATRIX_MINUS    reduce using rule 71 (numeric -> INTEGER .)
    MATRIX_PLUS     reduce using rule 71 (numeric -> INTEGER .)
    /               reduce using rule 71 (numeric -> INTEGER .)
    *               reduce using rule 71 (numeric -> INTEGER .)
    -               reduce using rule 71 (numeric -> INTEGER .)
    +               reduce using rule 71 (numeric -> INTEGER .)
    ;               reduce using rule 71 (numeric -> INTEGER .)
    ,               reduce using rule 71 (numeric -> INTEGER .)
    )               reduce using rule 71 (numeric -> INTEGER .)
    NE              reduce using rule 71 (numeric -> INTEGER .)
    GT              reduce using rule 71 (numeric -> INTEGER .)
    GE              reduce using rule 71 (numeric -> INTEGER .)
    LT              reduce using rule 71 (numeric -> INTEGER .)
    LE              reduce using rule 71 (numeric -> INTEGER .)
    EQ              reduce using rule 71 (numeric -> INTEGER .)
    RANGE           reduce using rule 71 (numeric -> INTEGER .)
    {               reduce using rule 71 (numeric -> INTEGER .)
    RETURN          reduce using rule 71 (numeric -> INTEGER .)
    CONTINUE        reduce using rule 71 (numeric -> INTEGER .)
    BREAK           reduce using rule 71 (numeric -> INTEGER .)
    PRINT           reduce using rule 71 (numeric -> INTEGER .)
    WHILE           reduce using rule 71 (numeric -> INTEGER .)
    FOR             reduce using rule 71 (numeric -> INTEGER .)
    IF              reduce using rule 71 (numeric -> INTEGER .)
    ID              reduce using rule 71 (numeric -> INTEGER .)
    ]               reduce using rule 71 (numeric -> INTEGER .)


state 46

    (27) print_statement -> PRINT expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 27 (print_statement -> PRINT expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 47

    (28) print_statement -> PRINT terms .
    ;               reduce using rule 28 (print_statement -> PRINT terms .)


state 48

    (42) expr -> term .
    (59) terms -> term . , terms
    (60) terms -> term .
  ! reduce/reduce conflict for ; resolved using rule 42 (expr -> term .)
  ! reduce/reduce conflict for ) resolved using rule 42 (expr -> term .)
    MATRIX_DIV      reduce using rule 42 (expr -> term .)
    MATRIX_MUL      reduce using rule 42 (expr -> term .)
    MATRIX_MINUS    reduce using rule 42 (expr -> term .)
    MATRIX_PLUS     reduce using rule 42 (expr -> term .)
    /               reduce using rule 42 (expr -> term .)
    *               reduce using rule 42 (expr -> term .)
    -               reduce using rule 42 (expr -> term .)
    +               reduce using rule 42 (expr -> term .)
    ;               reduce using rule 42 (expr -> term .)
    )               reduce using rule 42 (expr -> term .)
    ,               shift and go to state 81


state 49

    (14) assignment -> reference ASSIGN . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    reference                      shift and go to state 38
    expr                           shift and go to state 82
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37

state 50

    (15) assignment -> reference DIVIDE_BY . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    reference                      shift and go to state 38
    expr                           shift and go to state 83
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37

state 51

    (16) assignment -> reference MULTIPLY_BY . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    reference                      shift and go to state 38
    expr                           shift and go to state 84
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37

state 52

    (17) assignment -> reference SUBTRACT . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    reference                      shift and go to state 38
    expr                           shift and go to state 85
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37

state 53

    (18) assignment -> reference ADD . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    reference                      shift and go to state 38
    expr                           shift and go to state 86
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37

state 54

    (19) assignment -> id ASSIGN . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    expr                           shift and go to state 87
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 55

    (20) assignment -> id DIVIDE_BY . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    expr                           shift and go to state 88
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 56

    (21) assignment -> id MULTIPLY_BY . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    expr                           shift and go to state 89
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 57

    (22) assignment -> id SUBTRACT . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    expr                           shift and go to state 90
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 58

    (23) assignment -> id ADD . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    expr                           shift and go to state 91
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 59

    (68) reference -> id list .
    ASSIGN          reduce using rule 68 (reference -> id list .)
    DIVIDE_BY       reduce using rule 68 (reference -> id list .)
    MULTIPLY_BY     reduce using rule 68 (reference -> id list .)
    SUBTRACT        reduce using rule 68 (reference -> id list .)
    ADD             reduce using rule 68 (reference -> id list .)
    MATRIX_DIV      reduce using rule 68 (reference -> id list .)
    MATRIX_MUL      reduce using rule 68 (reference -> id list .)
    MATRIX_MINUS    reduce using rule 68 (reference -> id list .)
    MATRIX_PLUS     reduce using rule 68 (reference -> id list .)
    /               reduce using rule 68 (reference -> id list .)
    *               reduce using rule 68 (reference -> id list .)
    -               reduce using rule 68 (reference -> id list .)
    +               reduce using rule 68 (reference -> id list .)
    ;               reduce using rule 68 (reference -> id list .)
    ,               reduce using rule 68 (reference -> id list .)
    )               reduce using rule 68 (reference -> id list .)
    NE              reduce using rule 68 (reference -> id list .)
    GT              reduce using rule 68 (reference -> id list .)
    GE              reduce using rule 68 (reference -> id list .)
    LT              reduce using rule 68 (reference -> id list .)
    LE              reduce using rule 68 (reference -> id list .)
    EQ              reduce using rule 68 (reference -> id list .)
    RANGE           reduce using rule 68 (reference -> id list .)
    {               reduce using rule 68 (reference -> id list .)
    RETURN          reduce using rule 68 (reference -> id list .)
    CONTINUE        reduce using rule 68 (reference -> id list .)
    BREAK           reduce using rule 68 (reference -> id list .)
    PRINT           reduce using rule 68 (reference -> id list .)
    WHILE           reduce using rule 68 (reference -> id list .)
    FOR             reduce using rule 68 (reference -> id list .)
    IF              reduce using rule 68 (reference -> id list .)
    ID              reduce using rule 68 (reference -> id list .)
    ]               reduce using rule 68 (reference -> id list .)


state 60

    (26) while_loop -> WHILE ( . condition ) statement
    (32) condition -> . expr NE expr
    (33) condition -> . expr GT expr
    (34) condition -> . expr GE expr
    (35) condition -> . expr LT expr
    (36) condition -> . expr LE expr
    (37) condition -> . expr EQ expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    condition                      shift and go to state 92
    expr                           shift and go to state 93
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 61

    (24) for_loop -> FOR id . ASSIGN range_expr statement
    ASSIGN          shift and go to state 94


state 62

    (12) if_statement -> IF ( . condition ) statement ELSE statement
    (13) if_statement -> IF ( . condition ) statement
    (32) condition -> . expr NE expr
    (33) condition -> . expr GT expr
    (34) condition -> . expr GE expr
    (35) condition -> . expr LT expr
    (36) condition -> . expr LE expr
    (37) condition -> . expr EQ expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    condition                      shift and go to state 95
    expr                           shift and go to state 93
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 63

    (11) block -> { statements } .
    {               reduce using rule 11 (block -> { statements } .)
    RETURN          reduce using rule 11 (block -> { statements } .)
    CONTINUE        reduce using rule 11 (block -> { statements } .)
    BREAK           reduce using rule 11 (block -> { statements } .)
    PRINT           reduce using rule 11 (block -> { statements } .)
    WHILE           reduce using rule 11 (block -> { statements } .)
    FOR             reduce using rule 11 (block -> { statements } .)
    IF              reduce using rule 11 (block -> { statements } .)
    ID              reduce using rule 11 (block -> { statements } .)
    $end            reduce using rule 11 (block -> { statements } .)
    }               reduce using rule 11 (block -> { statements } .)
    ELSE            reduce using rule 11 (block -> { statements } .)


state 64

    (47) matrix_expr -> expr MATRIX_DIV . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 96
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 65

    (48) matrix_expr -> expr MATRIX_MUL . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 97
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 66

    (49) matrix_expr -> expr MATRIX_MINUS . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 98
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 67

    (50) matrix_expr -> expr MATRIX_PLUS . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 99
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 68

    (43) arithmetic_expr -> expr / . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 100
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 69

    (44) arithmetic_expr -> expr * . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 101
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 70

    (45) arithmetic_expr -> expr - . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 102
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 71

    (46) arithmetic_expr -> expr + . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 103
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 72

    (38) expr -> ( expr . )
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               shift and go to state 104
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 73

    (39) expr -> - expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 39 (expr -> - expr .)
    MATRIX_MUL      reduce using rule 39 (expr -> - expr .)
    MATRIX_MINUS    reduce using rule 39 (expr -> - expr .)
    MATRIX_PLUS     reduce using rule 39 (expr -> - expr .)
    /               reduce using rule 39 (expr -> - expr .)
    *               reduce using rule 39 (expr -> - expr .)
    -               reduce using rule 39 (expr -> - expr .)
    +               reduce using rule 39 (expr -> - expr .)
    ;               reduce using rule 39 (expr -> - expr .)
    )               reduce using rule 39 (expr -> - expr .)
    NE              reduce using rule 39 (expr -> - expr .)
    GT              reduce using rule 39 (expr -> - expr .)
    GE              reduce using rule 39 (expr -> - expr .)
    LT              reduce using rule 39 (expr -> - expr .)
    LE              reduce using rule 39 (expr -> - expr .)
    EQ              reduce using rule 39 (expr -> - expr .)
    RANGE           reduce using rule 39 (expr -> - expr .)
    {               reduce using rule 39 (expr -> - expr .)
    RETURN          reduce using rule 39 (expr -> - expr .)
    CONTINUE        reduce using rule 39 (expr -> - expr .)
    BREAK           reduce using rule 39 (expr -> - expr .)
    PRINT           reduce using rule 39 (expr -> - expr .)
    WHILE           reduce using rule 39 (expr -> - expr .)
    FOR             reduce using rule 39 (expr -> - expr .)
    IF              reduce using rule 39 (expr -> - expr .)
    ID              reduce using rule 39 (expr -> - expr .)


state 74

    (61) term -> id TRANSPOSE .
    MATRIX_DIV      reduce using rule 61 (term -> id TRANSPOSE .)
    MATRIX_MUL      reduce using rule 61 (term -> id TRANSPOSE .)
    MATRIX_MINUS    reduce using rule 61 (term -> id TRANSPOSE .)
    MATRIX_PLUS     reduce using rule 61 (term -> id TRANSPOSE .)
    /               reduce using rule 61 (term -> id TRANSPOSE .)
    *               reduce using rule 61 (term -> id TRANSPOSE .)
    -               reduce using rule 61 (term -> id TRANSPOSE .)
    +               reduce using rule 61 (term -> id TRANSPOSE .)
    ;               reduce using rule 61 (term -> id TRANSPOSE .)
    ,               reduce using rule 61 (term -> id TRANSPOSE .)
    )               reduce using rule 61 (term -> id TRANSPOSE .)
    NE              reduce using rule 61 (term -> id TRANSPOSE .)
    GT              reduce using rule 61 (term -> id TRANSPOSE .)
    GE              reduce using rule 61 (term -> id TRANSPOSE .)
    LT              reduce using rule 61 (term -> id TRANSPOSE .)
    LE              reduce using rule 61 (term -> id TRANSPOSE .)
    EQ              reduce using rule 61 (term -> id TRANSPOSE .)
    RANGE           reduce using rule 61 (term -> id TRANSPOSE .)
    {               reduce using rule 61 (term -> id TRANSPOSE .)
    RETURN          reduce using rule 61 (term -> id TRANSPOSE .)
    CONTINUE        reduce using rule 61 (term -> id TRANSPOSE .)
    BREAK           reduce using rule 61 (term -> id TRANSPOSE .)
    PRINT           reduce using rule 61 (term -> id TRANSPOSE .)
    WHILE           reduce using rule 61 (term -> id TRANSPOSE .)
    FOR             reduce using rule 61 (term -> id TRANSPOSE .)
    IF              reduce using rule 61 (term -> id TRANSPOSE .)
    ID              reduce using rule 61 (term -> id TRANSPOSE .)
    ]               reduce using rule 61 (term -> id TRANSPOSE .)


state 75

    (51) matrix -> matrix TRANSPOSE .
    TRANSPOSE       reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    MATRIX_DIV      reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    MATRIX_MUL      reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    MATRIX_MINUS    reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    MATRIX_PLUS     reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    /               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    *               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    -               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    +               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    ;               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    ,               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    )               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    NE              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    GT              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    GE              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    LT              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    LE              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    EQ              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    RANGE           reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    {               reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    RETURN          reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    CONTINUE        reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    BREAK           reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    PRINT           reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    WHILE           reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    FOR             reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    IF              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    ID              reduce using rule 51 (matrix -> matrix TRANSPOSE .)
    ]               reduce using rule 51 (matrix -> matrix TRANSPOSE .)


state 76

    (52) matrix -> ONES ( . expr )
    (55) matrix -> ONES ( . terms )
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (59) terms -> . term , terms
    (60) terms -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 105
    terms                          shift and go to state 106
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 48
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 77

    (53) matrix -> ZEROS ( . expr )
    (56) matrix -> ZEROS ( . terms )
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (59) terms -> . term , terms
    (60) terms -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 107
    terms                          shift and go to state 108
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 48
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 78

    (54) matrix -> EYE ( . expr )
    (57) matrix -> EYE ( . terms )
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (59) terms -> . term , terms
    (60) terms -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 109
    terms                          shift and go to state 110
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 48
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 79

    (58) list -> [ terms . ]
    ]               shift and go to state 111


state 80

    (59) terms -> term . , terms
    (60) terms -> term .
    ,               shift and go to state 81
    ]               reduce using rule 60 (terms -> term .)
    ;               reduce using rule 60 (terms -> term .)
    )               reduce using rule 60 (terms -> term .)


state 81

    (59) terms -> term , . terms
    (59) terms -> . term , terms
    (60) terms -> . term
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    term                           shift and go to state 80
    terms                          shift and go to state 112
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 82

    (14) assignment -> reference ASSIGN expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 14 (assignment -> reference ASSIGN expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 83

    (15) assignment -> reference DIVIDE_BY expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 15 (assignment -> reference DIVIDE_BY expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 84

    (16) assignment -> reference MULTIPLY_BY expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 16 (assignment -> reference MULTIPLY_BY expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 85

    (17) assignment -> reference SUBTRACT expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 17 (assignment -> reference SUBTRACT expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 86

    (18) assignment -> reference ADD expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 18 (assignment -> reference ADD expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 87

    (19) assignment -> id ASSIGN expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 19 (assignment -> id ASSIGN expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 88

    (20) assignment -> id DIVIDE_BY expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 20 (assignment -> id DIVIDE_BY expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 89

    (21) assignment -> id MULTIPLY_BY expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 21 (assignment -> id MULTIPLY_BY expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 90

    (22) assignment -> id SUBTRACT expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 22 (assignment -> id SUBTRACT expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 91

    (23) assignment -> id ADD expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    ;               reduce using rule 23 (assignment -> id ADD expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 92

    (26) while_loop -> WHILE ( condition . ) statement
    )               shift and go to state 113


state 93

    (32) condition -> expr . NE expr
    (33) condition -> expr . GT expr
    (34) condition -> expr . GE expr
    (35) condition -> expr . LT expr
    (36) condition -> expr . LE expr
    (37) condition -> expr . EQ expr
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    NE              shift and go to state 114
    GT              shift and go to state 115
    GE              shift and go to state 116
    LT              shift and go to state 117
    LE              shift and go to state 118
    EQ              shift and go to state 119
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 94

    (24) for_loop -> FOR id ASSIGN . range_expr statement
    (25) range_expr -> . expr RANGE expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    id                             shift and go to state 33
    range_expr                     shift and go to state 120
    expr                           shift and go to state 121
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 95

    (12) if_statement -> IF ( condition . ) statement ELSE statement
    (13) if_statement -> IF ( condition . ) statement
    )               shift and go to state 122


state 96

    (47) matrix_expr -> expr MATRIX_DIV expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_MUL      reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_MINUS    reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_PLUS     reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    /               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    *               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    -               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    +               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    ;               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    )               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    NE              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    GT              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    GE              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    LT              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    LE              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    EQ              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    RANGE           reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    {               reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    RETURN          reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    CONTINUE        reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    BREAK           reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    PRINT           reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    WHILE           reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    FOR             reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    IF              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)
    ID              reduce using rule 47 (matrix_expr -> expr MATRIX_DIV expr .)


state 97

    (48) matrix_expr -> expr MATRIX_MUL expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_MUL      reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_MINUS    reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_PLUS     reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    /               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    *               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    -               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    +               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    ;               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    )               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    NE              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    GT              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    GE              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    LT              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    LE              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    EQ              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    RANGE           reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    {               reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    RETURN          reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    CONTINUE        reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    BREAK           reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    PRINT           reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    WHILE           reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    FOR             reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    IF              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)
    ID              reduce using rule 48 (matrix_expr -> expr MATRIX_MUL expr .)


state 98

    (49) matrix_expr -> expr MATRIX_MINUS expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    MATRIX_PLUS     reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    -               reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    +               reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    ;               reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    )               reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    NE              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    GT              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    GE              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    LT              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    LE              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    EQ              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    RANGE           reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    {               reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    RETURN          reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    CONTINUE        reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    BREAK           reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    PRINT           reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    WHILE           reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    FOR             reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    IF              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    ID              reduce using rule 49 (matrix_expr -> expr MATRIX_MINUS expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    /               shift and go to state 68
    *               shift and go to state 69


state 99

    (50) matrix_expr -> expr MATRIX_PLUS expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    MATRIX_PLUS     reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    -               reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    +               reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    ;               reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    )               reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    NE              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    GT              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    GE              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    LT              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    LE              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    EQ              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    RANGE           reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    {               reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    RETURN          reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    CONTINUE        reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    BREAK           reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    PRINT           reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    WHILE           reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    FOR             reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    IF              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    ID              reduce using rule 50 (matrix_expr -> expr MATRIX_PLUS expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    /               shift and go to state 68
    *               shift and go to state 69


state 100

    (43) arithmetic_expr -> expr / expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 43 (arithmetic_expr -> expr / expr .)
    MATRIX_PLUS     reduce using rule 43 (arithmetic_expr -> expr / expr .)
    /               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    *               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    -               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    +               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    ;               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    )               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    NE              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    GT              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    GE              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    LT              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    LE              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    EQ              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    RANGE           reduce using rule 43 (arithmetic_expr -> expr / expr .)
    {               reduce using rule 43 (arithmetic_expr -> expr / expr .)
    RETURN          reduce using rule 43 (arithmetic_expr -> expr / expr .)
    CONTINUE        reduce using rule 43 (arithmetic_expr -> expr / expr .)
    BREAK           reduce using rule 43 (arithmetic_expr -> expr / expr .)
    PRINT           reduce using rule 43 (arithmetic_expr -> expr / expr .)
    WHILE           reduce using rule 43 (arithmetic_expr -> expr / expr .)
    FOR             reduce using rule 43 (arithmetic_expr -> expr / expr .)
    IF              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    ID              reduce using rule 43 (arithmetic_expr -> expr / expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65


state 101

    (44) arithmetic_expr -> expr * expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 44 (arithmetic_expr -> expr * expr .)
    MATRIX_PLUS     reduce using rule 44 (arithmetic_expr -> expr * expr .)
    /               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    *               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    -               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    +               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    ;               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    )               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    NE              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    GT              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    GE              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    LT              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    LE              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    EQ              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    RANGE           reduce using rule 44 (arithmetic_expr -> expr * expr .)
    {               reduce using rule 44 (arithmetic_expr -> expr * expr .)
    RETURN          reduce using rule 44 (arithmetic_expr -> expr * expr .)
    CONTINUE        reduce using rule 44 (arithmetic_expr -> expr * expr .)
    BREAK           reduce using rule 44 (arithmetic_expr -> expr * expr .)
    PRINT           reduce using rule 44 (arithmetic_expr -> expr * expr .)
    WHILE           reduce using rule 44 (arithmetic_expr -> expr * expr .)
    FOR             reduce using rule 44 (arithmetic_expr -> expr * expr .)
    IF              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    ID              reduce using rule 44 (arithmetic_expr -> expr * expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65


state 102

    (45) arithmetic_expr -> expr - expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    -               reduce using rule 45 (arithmetic_expr -> expr - expr .)
    +               reduce using rule 45 (arithmetic_expr -> expr - expr .)
    ;               reduce using rule 45 (arithmetic_expr -> expr - expr .)
    )               reduce using rule 45 (arithmetic_expr -> expr - expr .)
    NE              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    GT              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    GE              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    LT              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    LE              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    EQ              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    RANGE           reduce using rule 45 (arithmetic_expr -> expr - expr .)
    {               reduce using rule 45 (arithmetic_expr -> expr - expr .)
    RETURN          reduce using rule 45 (arithmetic_expr -> expr - expr .)
    CONTINUE        reduce using rule 45 (arithmetic_expr -> expr - expr .)
    BREAK           reduce using rule 45 (arithmetic_expr -> expr - expr .)
    PRINT           reduce using rule 45 (arithmetic_expr -> expr - expr .)
    WHILE           reduce using rule 45 (arithmetic_expr -> expr - expr .)
    FOR             reduce using rule 45 (arithmetic_expr -> expr - expr .)
    IF              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    ID              reduce using rule 45 (arithmetic_expr -> expr - expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 103

    (46) arithmetic_expr -> expr + expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    -               reduce using rule 46 (arithmetic_expr -> expr + expr .)
    +               reduce using rule 46 (arithmetic_expr -> expr + expr .)
    ;               reduce using rule 46 (arithmetic_expr -> expr + expr .)
    )               reduce using rule 46 (arithmetic_expr -> expr + expr .)
    NE              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    GT              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    GE              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    LT              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    LE              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    EQ              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    RANGE           reduce using rule 46 (arithmetic_expr -> expr + expr .)
    {               reduce using rule 46 (arithmetic_expr -> expr + expr .)
    RETURN          reduce using rule 46 (arithmetic_expr -> expr + expr .)
    CONTINUE        reduce using rule 46 (arithmetic_expr -> expr + expr .)
    BREAK           reduce using rule 46 (arithmetic_expr -> expr + expr .)
    PRINT           reduce using rule 46 (arithmetic_expr -> expr + expr .)
    WHILE           reduce using rule 46 (arithmetic_expr -> expr + expr .)
    FOR             reduce using rule 46 (arithmetic_expr -> expr + expr .)
    IF              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    ID              reduce using rule 46 (arithmetic_expr -> expr + expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69


state 104

    (38) expr -> ( expr ) .
    MATRIX_DIV      reduce using rule 38 (expr -> ( expr ) .)
    MATRIX_MUL      reduce using rule 38 (expr -> ( expr ) .)
    MATRIX_MINUS    reduce using rule 38 (expr -> ( expr ) .)
    MATRIX_PLUS     reduce using rule 38 (expr -> ( expr ) .)
    /               reduce using rule 38 (expr -> ( expr ) .)
    *               reduce using rule 38 (expr -> ( expr ) .)
    -               reduce using rule 38 (expr -> ( expr ) .)
    +               reduce using rule 38 (expr -> ( expr ) .)
    ;               reduce using rule 38 (expr -> ( expr ) .)
    )               reduce using rule 38 (expr -> ( expr ) .)
    NE              reduce using rule 38 (expr -> ( expr ) .)
    GT              reduce using rule 38 (expr -> ( expr ) .)
    GE              reduce using rule 38 (expr -> ( expr ) .)
    LT              reduce using rule 38 (expr -> ( expr ) .)
    LE              reduce using rule 38 (expr -> ( expr ) .)
    EQ              reduce using rule 38 (expr -> ( expr ) .)
    RANGE           reduce using rule 38 (expr -> ( expr ) .)
    {               reduce using rule 38 (expr -> ( expr ) .)
    RETURN          reduce using rule 38 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 38 (expr -> ( expr ) .)
    BREAK           reduce using rule 38 (expr -> ( expr ) .)
    PRINT           reduce using rule 38 (expr -> ( expr ) .)
    WHILE           reduce using rule 38 (expr -> ( expr ) .)
    FOR             reduce using rule 38 (expr -> ( expr ) .)
    IF              reduce using rule 38 (expr -> ( expr ) .)
    ID              reduce using rule 38 (expr -> ( expr ) .)


state 105

    (52) matrix -> ONES ( expr . )
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               shift and go to state 123
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 106

    (55) matrix -> ONES ( terms . )
    )               shift and go to state 124


state 107

    (53) matrix -> ZEROS ( expr . )
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               shift and go to state 125
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 108

    (56) matrix -> ZEROS ( terms . )
    )               shift and go to state 126


state 109

    (54) matrix -> EYE ( expr . )
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               shift and go to state 127
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 110

    (57) matrix -> EYE ( terms . )
    )               shift and go to state 128


state 111

    (58) list -> [ terms ] .
    MATRIX_DIV      reduce using rule 58 (list -> [ terms ] .)
    MATRIX_MUL      reduce using rule 58 (list -> [ terms ] .)
    MATRIX_MINUS    reduce using rule 58 (list -> [ terms ] .)
    MATRIX_PLUS     reduce using rule 58 (list -> [ terms ] .)
    /               reduce using rule 58 (list -> [ terms ] .)
    *               reduce using rule 58 (list -> [ terms ] .)
    -               reduce using rule 58 (list -> [ terms ] .)
    +               reduce using rule 58 (list -> [ terms ] .)
    ;               reduce using rule 58 (list -> [ terms ] .)
    ,               reduce using rule 58 (list -> [ terms ] .)
    ASSIGN          reduce using rule 58 (list -> [ terms ] .)
    DIVIDE_BY       reduce using rule 58 (list -> [ terms ] .)
    MULTIPLY_BY     reduce using rule 58 (list -> [ terms ] .)
    SUBTRACT        reduce using rule 58 (list -> [ terms ] .)
    ADD             reduce using rule 58 (list -> [ terms ] .)
    )               reduce using rule 58 (list -> [ terms ] .)
    NE              reduce using rule 58 (list -> [ terms ] .)
    GT              reduce using rule 58 (list -> [ terms ] .)
    GE              reduce using rule 58 (list -> [ terms ] .)
    LT              reduce using rule 58 (list -> [ terms ] .)
    LE              reduce using rule 58 (list -> [ terms ] .)
    EQ              reduce using rule 58 (list -> [ terms ] .)
    RANGE           reduce using rule 58 (list -> [ terms ] .)
    {               reduce using rule 58 (list -> [ terms ] .)
    RETURN          reduce using rule 58 (list -> [ terms ] .)
    CONTINUE        reduce using rule 58 (list -> [ terms ] .)
    BREAK           reduce using rule 58 (list -> [ terms ] .)
    PRINT           reduce using rule 58 (list -> [ terms ] .)
    WHILE           reduce using rule 58 (list -> [ terms ] .)
    FOR             reduce using rule 58 (list -> [ terms ] .)
    IF              reduce using rule 58 (list -> [ terms ] .)
    ID              reduce using rule 58 (list -> [ terms ] .)
    ]               reduce using rule 58 (list -> [ terms ] .)


state 112

    (59) terms -> term , terms .
    ;               reduce using rule 59 (terms -> term , terms .)
    ]               reduce using rule 59 (terms -> term , terms .)
    )               reduce using rule 59 (terms -> term , terms .)


state 113

    (26) while_loop -> WHILE ( condition ) . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    statement                      shift and go to state 129
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 114

    (32) condition -> expr NE . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 130
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 115

    (33) condition -> expr GT . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 131
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 116

    (34) condition -> expr GE . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 132
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 117

    (35) condition -> expr LT . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 133
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 118

    (36) condition -> expr LE . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 134
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 119

    (37) condition -> expr EQ . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 135
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 120

    (24) for_loop -> FOR id ASSIGN range_expr . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    id                             shift and go to state 17
    statement                      shift and go to state 136
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 121

    (25) range_expr -> expr . RANGE expr
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    RANGE           shift and go to state 137
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 122

    (12) if_statement -> IF ( condition ) . statement ELSE statement
    (13) if_statement -> IF ( condition ) . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    statement                      shift and go to state 138
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 123

    (52) matrix -> ONES ( expr ) .
    TRANSPOSE       reduce using rule 52 (matrix -> ONES ( expr ) .)
    MATRIX_DIV      reduce using rule 52 (matrix -> ONES ( expr ) .)
    MATRIX_MUL      reduce using rule 52 (matrix -> ONES ( expr ) .)
    MATRIX_MINUS    reduce using rule 52 (matrix -> ONES ( expr ) .)
    MATRIX_PLUS     reduce using rule 52 (matrix -> ONES ( expr ) .)
    /               reduce using rule 52 (matrix -> ONES ( expr ) .)
    *               reduce using rule 52 (matrix -> ONES ( expr ) .)
    -               reduce using rule 52 (matrix -> ONES ( expr ) .)
    +               reduce using rule 52 (matrix -> ONES ( expr ) .)
    ;               reduce using rule 52 (matrix -> ONES ( expr ) .)
    ,               reduce using rule 52 (matrix -> ONES ( expr ) .)
    )               reduce using rule 52 (matrix -> ONES ( expr ) .)
    NE              reduce using rule 52 (matrix -> ONES ( expr ) .)
    GT              reduce using rule 52 (matrix -> ONES ( expr ) .)
    GE              reduce using rule 52 (matrix -> ONES ( expr ) .)
    LT              reduce using rule 52 (matrix -> ONES ( expr ) .)
    LE              reduce using rule 52 (matrix -> ONES ( expr ) .)
    EQ              reduce using rule 52 (matrix -> ONES ( expr ) .)
    RANGE           reduce using rule 52 (matrix -> ONES ( expr ) .)
    {               reduce using rule 52 (matrix -> ONES ( expr ) .)
    RETURN          reduce using rule 52 (matrix -> ONES ( expr ) .)
    CONTINUE        reduce using rule 52 (matrix -> ONES ( expr ) .)
    BREAK           reduce using rule 52 (matrix -> ONES ( expr ) .)
    PRINT           reduce using rule 52 (matrix -> ONES ( expr ) .)
    WHILE           reduce using rule 52 (matrix -> ONES ( expr ) .)
    FOR             reduce using rule 52 (matrix -> ONES ( expr ) .)
    IF              reduce using rule 52 (matrix -> ONES ( expr ) .)
    ID              reduce using rule 52 (matrix -> ONES ( expr ) .)
    ]               reduce using rule 52 (matrix -> ONES ( expr ) .)


state 124

    (55) matrix -> ONES ( terms ) .
    TRANSPOSE       reduce using rule 55 (matrix -> ONES ( terms ) .)
    MATRIX_DIV      reduce using rule 55 (matrix -> ONES ( terms ) .)
    MATRIX_MUL      reduce using rule 55 (matrix -> ONES ( terms ) .)
    MATRIX_MINUS    reduce using rule 55 (matrix -> ONES ( terms ) .)
    MATRIX_PLUS     reduce using rule 55 (matrix -> ONES ( terms ) .)
    /               reduce using rule 55 (matrix -> ONES ( terms ) .)
    *               reduce using rule 55 (matrix -> ONES ( terms ) .)
    -               reduce using rule 55 (matrix -> ONES ( terms ) .)
    +               reduce using rule 55 (matrix -> ONES ( terms ) .)
    ;               reduce using rule 55 (matrix -> ONES ( terms ) .)
    ,               reduce using rule 55 (matrix -> ONES ( terms ) .)
    )               reduce using rule 55 (matrix -> ONES ( terms ) .)
    NE              reduce using rule 55 (matrix -> ONES ( terms ) .)
    GT              reduce using rule 55 (matrix -> ONES ( terms ) .)
    GE              reduce using rule 55 (matrix -> ONES ( terms ) .)
    LT              reduce using rule 55 (matrix -> ONES ( terms ) .)
    LE              reduce using rule 55 (matrix -> ONES ( terms ) .)
    EQ              reduce using rule 55 (matrix -> ONES ( terms ) .)
    RANGE           reduce using rule 55 (matrix -> ONES ( terms ) .)
    {               reduce using rule 55 (matrix -> ONES ( terms ) .)
    RETURN          reduce using rule 55 (matrix -> ONES ( terms ) .)
    CONTINUE        reduce using rule 55 (matrix -> ONES ( terms ) .)
    BREAK           reduce using rule 55 (matrix -> ONES ( terms ) .)
    PRINT           reduce using rule 55 (matrix -> ONES ( terms ) .)
    WHILE           reduce using rule 55 (matrix -> ONES ( terms ) .)
    FOR             reduce using rule 55 (matrix -> ONES ( terms ) .)
    IF              reduce using rule 55 (matrix -> ONES ( terms ) .)
    ID              reduce using rule 55 (matrix -> ONES ( terms ) .)
    ]               reduce using rule 55 (matrix -> ONES ( terms ) .)


state 125

    (53) matrix -> ZEROS ( expr ) .
    TRANSPOSE       reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    MATRIX_DIV      reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    MATRIX_MUL      reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    MATRIX_MINUS    reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    MATRIX_PLUS     reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    /               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    *               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    -               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    +               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    ;               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    ,               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    )               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    NE              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    GT              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    GE              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    LT              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    LE              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    EQ              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    RANGE           reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    {               reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    RETURN          reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    CONTINUE        reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    BREAK           reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    PRINT           reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    WHILE           reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    FOR             reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    IF              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    ID              reduce using rule 53 (matrix -> ZEROS ( expr ) .)
    ]               reduce using rule 53 (matrix -> ZEROS ( expr ) .)


state 126

    (56) matrix -> ZEROS ( terms ) .
    TRANSPOSE       reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    MATRIX_DIV      reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    MATRIX_MUL      reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    MATRIX_MINUS    reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    MATRIX_PLUS     reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    /               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    *               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    -               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    +               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    ;               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    ,               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    )               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    NE              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    GT              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    GE              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    LT              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    LE              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    EQ              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    RANGE           reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    {               reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    RETURN          reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    CONTINUE        reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    BREAK           reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    PRINT           reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    WHILE           reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    FOR             reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    IF              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    ID              reduce using rule 56 (matrix -> ZEROS ( terms ) .)
    ]               reduce using rule 56 (matrix -> ZEROS ( terms ) .)


state 127

    (54) matrix -> EYE ( expr ) .
    TRANSPOSE       reduce using rule 54 (matrix -> EYE ( expr ) .)
    MATRIX_DIV      reduce using rule 54 (matrix -> EYE ( expr ) .)
    MATRIX_MUL      reduce using rule 54 (matrix -> EYE ( expr ) .)
    MATRIX_MINUS    reduce using rule 54 (matrix -> EYE ( expr ) .)
    MATRIX_PLUS     reduce using rule 54 (matrix -> EYE ( expr ) .)
    /               reduce using rule 54 (matrix -> EYE ( expr ) .)
    *               reduce using rule 54 (matrix -> EYE ( expr ) .)
    -               reduce using rule 54 (matrix -> EYE ( expr ) .)
    +               reduce using rule 54 (matrix -> EYE ( expr ) .)
    ;               reduce using rule 54 (matrix -> EYE ( expr ) .)
    ,               reduce using rule 54 (matrix -> EYE ( expr ) .)
    )               reduce using rule 54 (matrix -> EYE ( expr ) .)
    NE              reduce using rule 54 (matrix -> EYE ( expr ) .)
    GT              reduce using rule 54 (matrix -> EYE ( expr ) .)
    GE              reduce using rule 54 (matrix -> EYE ( expr ) .)
    LT              reduce using rule 54 (matrix -> EYE ( expr ) .)
    LE              reduce using rule 54 (matrix -> EYE ( expr ) .)
    EQ              reduce using rule 54 (matrix -> EYE ( expr ) .)
    RANGE           reduce using rule 54 (matrix -> EYE ( expr ) .)
    {               reduce using rule 54 (matrix -> EYE ( expr ) .)
    RETURN          reduce using rule 54 (matrix -> EYE ( expr ) .)
    CONTINUE        reduce using rule 54 (matrix -> EYE ( expr ) .)
    BREAK           reduce using rule 54 (matrix -> EYE ( expr ) .)
    PRINT           reduce using rule 54 (matrix -> EYE ( expr ) .)
    WHILE           reduce using rule 54 (matrix -> EYE ( expr ) .)
    FOR             reduce using rule 54 (matrix -> EYE ( expr ) .)
    IF              reduce using rule 54 (matrix -> EYE ( expr ) .)
    ID              reduce using rule 54 (matrix -> EYE ( expr ) .)
    ]               reduce using rule 54 (matrix -> EYE ( expr ) .)


state 128

    (57) matrix -> EYE ( terms ) .
    TRANSPOSE       reduce using rule 57 (matrix -> EYE ( terms ) .)
    MATRIX_DIV      reduce using rule 57 (matrix -> EYE ( terms ) .)
    MATRIX_MUL      reduce using rule 57 (matrix -> EYE ( terms ) .)
    MATRIX_MINUS    reduce using rule 57 (matrix -> EYE ( terms ) .)
    MATRIX_PLUS     reduce using rule 57 (matrix -> EYE ( terms ) .)
    /               reduce using rule 57 (matrix -> EYE ( terms ) .)
    *               reduce using rule 57 (matrix -> EYE ( terms ) .)
    -               reduce using rule 57 (matrix -> EYE ( terms ) .)
    +               reduce using rule 57 (matrix -> EYE ( terms ) .)
    ;               reduce using rule 57 (matrix -> EYE ( terms ) .)
    ,               reduce using rule 57 (matrix -> EYE ( terms ) .)
    )               reduce using rule 57 (matrix -> EYE ( terms ) .)
    NE              reduce using rule 57 (matrix -> EYE ( terms ) .)
    GT              reduce using rule 57 (matrix -> EYE ( terms ) .)
    GE              reduce using rule 57 (matrix -> EYE ( terms ) .)
    LT              reduce using rule 57 (matrix -> EYE ( terms ) .)
    LE              reduce using rule 57 (matrix -> EYE ( terms ) .)
    EQ              reduce using rule 57 (matrix -> EYE ( terms ) .)
    RANGE           reduce using rule 57 (matrix -> EYE ( terms ) .)
    {               reduce using rule 57 (matrix -> EYE ( terms ) .)
    RETURN          reduce using rule 57 (matrix -> EYE ( terms ) .)
    CONTINUE        reduce using rule 57 (matrix -> EYE ( terms ) .)
    BREAK           reduce using rule 57 (matrix -> EYE ( terms ) .)
    PRINT           reduce using rule 57 (matrix -> EYE ( terms ) .)
    WHILE           reduce using rule 57 (matrix -> EYE ( terms ) .)
    FOR             reduce using rule 57 (matrix -> EYE ( terms ) .)
    IF              reduce using rule 57 (matrix -> EYE ( terms ) .)
    ID              reduce using rule 57 (matrix -> EYE ( terms ) .)
    ]               reduce using rule 57 (matrix -> EYE ( terms ) .)


state 129

    (26) while_loop -> WHILE ( condition ) statement .
    {               reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    RETURN          reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    CONTINUE        reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    BREAK           reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    PRINT           reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    WHILE           reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    FOR             reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    IF              reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    ID              reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    $end            reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    }               reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)
    ELSE            reduce using rule 26 (while_loop -> WHILE ( condition ) statement .)


state 130

    (32) condition -> expr NE expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 32 (condition -> expr NE expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 131

    (33) condition -> expr GT expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 33 (condition -> expr GT expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 132

    (34) condition -> expr GE expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 34 (condition -> expr GE expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 133

    (35) condition -> expr LT expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 35 (condition -> expr LT expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 134

    (36) condition -> expr LE expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 36 (condition -> expr LE expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 135

    (37) condition -> expr EQ expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    )               reduce using rule 37 (condition -> expr EQ expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 136

    (24) for_loop -> FOR id ASSIGN range_expr statement .
    {               reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    RETURN          reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    CONTINUE        reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    BREAK           reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    PRINT           reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    WHILE           reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    FOR             reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    IF              reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    ID              reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    $end            reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    }               reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)
    ELSE            reduce using rule 24 (for_loop -> FOR id ASSIGN range_expr statement .)


state 137

    (25) range_expr -> expr RANGE . expr
    (38) expr -> . ( expr )
    (39) expr -> . - expr
    (40) expr -> . matrix_expr
    (41) expr -> . arithmetic_expr
    (42) expr -> . term
    (47) matrix_expr -> . expr MATRIX_DIV expr
    (48) matrix_expr -> . expr MATRIX_MUL expr
    (49) matrix_expr -> . expr MATRIX_MINUS expr
    (50) matrix_expr -> . expr MATRIX_PLUS expr
    (43) arithmetic_expr -> . expr / expr
    (44) arithmetic_expr -> . expr * expr
    (45) arithmetic_expr -> . expr - expr
    (46) arithmetic_expr -> . expr + expr
    (61) term -> . id TRANSPOSE
    (62) term -> . string
    (63) term -> . id
    (64) term -> . matrix
    (65) term -> . list
    (66) term -> . numeric
    (67) term -> . reference
    (69) id -> . ID
    (72) string -> . STRING
    (51) matrix -> . matrix TRANSPOSE
    (52) matrix -> . ONES ( expr )
    (53) matrix -> . ZEROS ( expr )
    (54) matrix -> . EYE ( expr )
    (55) matrix -> . ONES ( terms )
    (56) matrix -> . ZEROS ( terms )
    (57) matrix -> . EYE ( terms )
    (58) list -> . [ terms ]
    (70) numeric -> . FLOAT
    (71) numeric -> . INTEGER
    (68) reference -> . id list
    (               shift and go to state 28
    -               shift and go to state 29
    ID              shift and go to state 21
    STRING          shift and go to state 39
    ONES            shift and go to state 40
    ZEROS           shift and go to state 41
    EYE             shift and go to state 42
    [               shift and go to state 43
    FLOAT           shift and go to state 44
    INTEGER         shift and go to state 45

    expr                           shift and go to state 139
    matrix_expr                    shift and go to state 30
    arithmetic_expr                shift and go to state 31
    term                           shift and go to state 32
    id                             shift and go to state 33
    string                         shift and go to state 34
    matrix                         shift and go to state 35
    list                           shift and go to state 36
    numeric                        shift and go to state 37
    reference                      shift and go to state 38

state 138

    (12) if_statement -> IF ( condition ) statement . ELSE statement
    (13) if_statement -> IF ( condition ) statement .
    ELSE            shift and go to state 140
    {               reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    RETURN          reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    CONTINUE        reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    BREAK           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    PRINT           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    WHILE           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    FOR             reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    IF              reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    ID              reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    $end            reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    }               reduce using rule 13 (if_statement -> IF ( condition ) statement .)


state 139

    (25) range_expr -> expr RANGE expr .
    (47) matrix_expr -> expr . MATRIX_DIV expr
    (48) matrix_expr -> expr . MATRIX_MUL expr
    (49) matrix_expr -> expr . MATRIX_MINUS expr
    (50) matrix_expr -> expr . MATRIX_PLUS expr
    (43) arithmetic_expr -> expr . / expr
    (44) arithmetic_expr -> expr . * expr
    (45) arithmetic_expr -> expr . - expr
    (46) arithmetic_expr -> expr . + expr
    {               reduce using rule 25 (range_expr -> expr RANGE expr .)
    RETURN          reduce using rule 25 (range_expr -> expr RANGE expr .)
    CONTINUE        reduce using rule 25 (range_expr -> expr RANGE expr .)
    BREAK           reduce using rule 25 (range_expr -> expr RANGE expr .)
    PRINT           reduce using rule 25 (range_expr -> expr RANGE expr .)
    WHILE           reduce using rule 25 (range_expr -> expr RANGE expr .)
    FOR             reduce using rule 25 (range_expr -> expr RANGE expr .)
    IF              reduce using rule 25 (range_expr -> expr RANGE expr .)
    ID              reduce using rule 25 (range_expr -> expr RANGE expr .)
    MATRIX_DIV      shift and go to state 64
    MATRIX_MUL      shift and go to state 65
    MATRIX_MINUS    shift and go to state 66
    MATRIX_PLUS     shift and go to state 67
    /               shift and go to state 68
    *               shift and go to state 69
    -               shift and go to state 70
    +               shift and go to state 71


state 140

    (12) if_statement -> IF ( condition ) statement ELSE . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (29) keyword_statement -> . RETURN expr
    (30) keyword_statement -> . CONTINUE
    (31) keyword_statement -> . BREAK
    (27) print_statement -> . PRINT expr
    (28) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . id ASSIGN expr
    (20) assignment -> . id DIVIDE_BY expr
    (21) assignment -> . id MULTIPLY_BY expr
    (22) assignment -> . id SUBTRACT expr
    (23) assignment -> . id ADD expr
    (26) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR id ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (68) reference -> . id list
    (69) id -> . ID
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20
    ID              shift and go to state 21

    statement                      shift and go to state 141
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16
    id                             shift and go to state 17

state 141

    (12) if_statement -> IF ( condition ) statement ELSE statement .
    {               reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    RETURN          reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    CONTINUE        reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    BREAK           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    PRINT           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    WHILE           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    FOR             reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    IF              reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    ID              reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    $end            reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    }               reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    ELSE            reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)


Conflicts:

reduce/reduce conflict in state 48 resolved using rule expr -> term
rejected rule (terms -> term) in state 48