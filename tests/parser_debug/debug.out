Grammar:

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> statement
Rule 4     statement -> block
Rule 5     statement -> keyword_statement ;
Rule 6     statement -> print_statement ;
Rule 7     statement -> assignment ;
Rule 8     statement -> while_loop
Rule 9     statement -> for_loop
Rule 10    statement -> if_statement
Rule 11    block -> { statements }
Rule 12    if_statement -> IF ( condition ) statement ELSE statement  [precedence=nonassoc, level=9]
Rule 13    if_statement -> IF ( condition ) statement  [precedence=nonassoc, level=8]
Rule 14    assignment -> reference ASSIGN expr
Rule 15    assignment -> reference DIVIDE_BY expr
Rule 16    assignment -> reference MULTIPLY_BY expr
Rule 17    assignment -> reference SUBTRACT expr
Rule 18    assignment -> reference ADD expr
Rule 19    assignment -> ID ASSIGN expr
Rule 20    assignment -> ID DIVIDE_BY expr
Rule 21    assignment -> ID MULTIPLY_BY expr
Rule 22    assignment -> ID SUBTRACT expr
Rule 23    assignment -> ID ADD expr
Rule 24    for_loop -> FOR ID ASSIGN range_expr statement
Rule 25    range_expr -> INTEGER RANGE ID
Rule 26    range_expr -> ID RANGE ID
Rule 27    range_expr -> INTEGER RANGE INTEGER
Rule 28    while_loop -> WHILE ( condition ) statement
Rule 29    print_statement -> PRINT terms
Rule 30    keyword_statement -> RETURN expr
Rule 31    keyword_statement -> CONTINUE
Rule 32    keyword_statement -> BREAK
Rule 33    condition -> expr NE expr  [precedence=left, level=2]
Rule 34    condition -> expr GT expr  [precedence=left, level=1]
Rule 35    condition -> expr GE expr  [precedence=left, level=2]
Rule 36    condition -> expr LT expr  [precedence=left, level=1]
Rule 37    condition -> expr LE expr  [precedence=left, level=2]
Rule 38    condition -> expr EQ expr  [precedence=left, level=2]
Rule 39    expr -> ( expr )
Rule 40    expr -> - expr  [precedence=left, level=7]
Rule 41    expr -> matrix_expr
Rule 42    expr -> arithmetic_expr
Rule 43    expr -> term
Rule 44    arithmetic_expr -> expr / expr  [precedence=left, level=5]
Rule 45    arithmetic_expr -> expr * expr  [precedence=left, level=5]
Rule 46    arithmetic_expr -> expr - expr  [precedence=left, level=3]
Rule 47    arithmetic_expr -> expr + expr  [precedence=left, level=3]
Rule 48    matrix_expr -> expr MATRIX_DIV expr  [precedence=left, level=6]
Rule 49    matrix_expr -> expr MATRIX_MUL expr  [precedence=left, level=6]
Rule 50    matrix_expr -> expr MATRIX_MINUS expr  [precedence=left, level=4]
Rule 51    matrix_expr -> expr MATRIX_PLUS expr  [precedence=left, level=4]
Rule 52    MATRIX -> MATRIX TRANSPOSE
Rule 53    MATRIX -> ONES ( INTEGER )
Rule 54    MATRIX -> ZEROS ( INTEGER )
Rule 55    MATRIX -> EYE ( INTEGER )
Rule 56    list -> [ terms ]
Rule 57    terms -> term , terms
Rule 58    terms -> term
Rule 59    term -> ID
Rule 60    term -> ID TRANSPOSE
Rule 61    term -> MATRIX
Rule 62    term -> list
Rule 63    term -> numeric
Rule 64    term -> reference
Rule 65    term -> STRING
Rule 66    reference -> ID list
Rule 67    numeric -> FLOAT
Rule 68    numeric -> INTEGER

Terminals, with rules where they appear:

(                    : 12 13 28 39 53 54 55
)                    : 12 13 28 39 53 54 55
*                    : 45
+                    : 47
,                    : 57
-                    : 40 46
/                    : 44
;                    : 5 6 7
ADD                  : 18 23
ASSIGN               : 14 19 24
BREAK                : 32
CONTINUE             : 31
DIVIDE_BY            : 15 20
ELSE                 : 12
EQ                   : 38
EYE                  : 55
FLOAT                : 67
FOR                  : 24
GE                   : 35
GT                   : 34
ID                   : 19 20 21 22 23 24 25 26 26 59 60 66
IF                   : 12 13
INTEGER              : 25 27 27 53 54 55 68
LE                   : 37
LT                   : 36
MATRIX_DIV           : 48
MATRIX_MINUS         : 50
MATRIX_MUL           : 49
MATRIX_PLUS          : 51
MULTIPLY_BY          : 16 21
NE                   : 33
ONES                 : 53
PRINT                : 29
RANGE                : 25 26 27
RETURN               : 30
STRING               : 65
SUBTRACT             : 17 22
TRANSPOSE            : 52 60
WHILE                : 28
ZEROS                : 54
[                    : 56
]                    : 56
error                : 
{                    : 11
}                    : 11

Nonterminals, with rules where they appear:

MATRIX               : 52 61
arithmetic_expr      : 42
assignment           : 7
block                : 4
condition            : 12 13 28
expr                 : 14 15 16 17 18 19 20 21 22 23 30 33 33 34 34 35 35 36 36 37 37 38 38 39 40 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51
for_loop             : 9
if_statement         : 10
keyword_statement    : 5
list                 : 62 66
matrix_expr          : 41
numeric              : 63
print_statement      : 6
program              : 0
range_expr           : 24
reference            : 14 15 16 17 18 64
statement            : 2 3 12 12 13 24 28
statements           : 1 2 11
term                 : 43 57 58
terms                : 29 56 57
while_loop           : 8


state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 1

    (0) S' -> program .


state 2

    (1) program -> statements .
    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . statements
    (3) statements -> statement .
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 3
    statements                     shift and go to state 21
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 4

    (4) statement -> block .
    {               reduce using rule 4 (statement -> block .)
    RETURN          reduce using rule 4 (statement -> block .)
    CONTINUE        reduce using rule 4 (statement -> block .)
    BREAK           reduce using rule 4 (statement -> block .)
    PRINT           reduce using rule 4 (statement -> block .)
    ID              reduce using rule 4 (statement -> block .)
    WHILE           reduce using rule 4 (statement -> block .)
    FOR             reduce using rule 4 (statement -> block .)
    IF              reduce using rule 4 (statement -> block .)
    $end            reduce using rule 4 (statement -> block .)
    }               reduce using rule 4 (statement -> block .)
    ELSE            reduce using rule 4 (statement -> block .)


state 5

    (5) statement -> keyword_statement . ;
    ;               shift and go to state 22


state 6

    (6) statement -> print_statement . ;
    ;               shift and go to state 23


state 7

    (7) statement -> assignment . ;
    ;               shift and go to state 24


state 8

    (8) statement -> while_loop .
    {               reduce using rule 8 (statement -> while_loop .)
    RETURN          reduce using rule 8 (statement -> while_loop .)
    CONTINUE        reduce using rule 8 (statement -> while_loop .)
    BREAK           reduce using rule 8 (statement -> while_loop .)
    PRINT           reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    WHILE           reduce using rule 8 (statement -> while_loop .)
    FOR             reduce using rule 8 (statement -> while_loop .)
    IF              reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    }               reduce using rule 8 (statement -> while_loop .)
    ELSE            reduce using rule 8 (statement -> while_loop .)


state 9

    (9) statement -> for_loop .
    {               reduce using rule 9 (statement -> for_loop .)
    RETURN          reduce using rule 9 (statement -> for_loop .)
    CONTINUE        reduce using rule 9 (statement -> for_loop .)
    BREAK           reduce using rule 9 (statement -> for_loop .)
    PRINT           reduce using rule 9 (statement -> for_loop .)
    ID              reduce using rule 9 (statement -> for_loop .)
    WHILE           reduce using rule 9 (statement -> for_loop .)
    FOR             reduce using rule 9 (statement -> for_loop .)
    IF              reduce using rule 9 (statement -> for_loop .)
    $end            reduce using rule 9 (statement -> for_loop .)
    }               reduce using rule 9 (statement -> for_loop .)
    ELSE            reduce using rule 9 (statement -> for_loop .)


state 10

    (10) statement -> if_statement .
    {               reduce using rule 10 (statement -> if_statement .)
    RETURN          reduce using rule 10 (statement -> if_statement .)
    CONTINUE        reduce using rule 10 (statement -> if_statement .)
    BREAK           reduce using rule 10 (statement -> if_statement .)
    PRINT           reduce using rule 10 (statement -> if_statement .)
    ID              reduce using rule 10 (statement -> if_statement .)
    WHILE           reduce using rule 10 (statement -> if_statement .)
    FOR             reduce using rule 10 (statement -> if_statement .)
    IF              reduce using rule 10 (statement -> if_statement .)
    $end            reduce using rule 10 (statement -> if_statement .)
    }               reduce using rule 10 (statement -> if_statement .)
    ELSE            reduce using rule 10 (statement -> if_statement .)


state 11

    (11) block -> { . statements }
    (2) statements -> . statement statements
    (3) statements -> . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statements                     shift and go to state 25
    statement                      shift and go to state 3
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 12

    (30) keyword_statement -> RETURN . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 26
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 13

    (31) keyword_statement -> CONTINUE .
    ;               reduce using rule 31 (keyword_statement -> CONTINUE .)


state 14

    (32) keyword_statement -> BREAK .
    ;               reduce using rule 32 (keyword_statement -> BREAK .)


state 15

    (29) print_statement -> PRINT . terms
    (57) terms -> . term , terms
    (58) terms -> . term
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    terms                          shift and go to state 44
    term                           shift and go to state 45
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 16

    (14) assignment -> reference . ASSIGN expr
    (15) assignment -> reference . DIVIDE_BY expr
    (16) assignment -> reference . MULTIPLY_BY expr
    (17) assignment -> reference . SUBTRACT expr
    (18) assignment -> reference . ADD expr
    ASSIGN          shift and go to state 46
    DIVIDE_BY       shift and go to state 47
    MULTIPLY_BY     shift and go to state 48
    SUBTRACT        shift and go to state 49
    ADD             shift and go to state 50


state 17

    (19) assignment -> ID . ASSIGN expr
    (20) assignment -> ID . DIVIDE_BY expr
    (21) assignment -> ID . MULTIPLY_BY expr
    (22) assignment -> ID . SUBTRACT expr
    (23) assignment -> ID . ADD expr
    (66) reference -> ID . list
    (56) list -> . [ terms ]
    ASSIGN          shift and go to state 51
    DIVIDE_BY       shift and go to state 52
    MULTIPLY_BY     shift and go to state 53
    SUBTRACT        shift and go to state 54
    ADD             shift and go to state 55
    [               shift and go to state 42

    list                           shift and go to state 56

state 18

    (28) while_loop -> WHILE . ( condition ) statement
    (               shift and go to state 57


state 19

    (24) for_loop -> FOR . ID ASSIGN range_expr statement
    ID              shift and go to state 58


state 20

    (12) if_statement -> IF . ( condition ) statement ELSE statement
    (13) if_statement -> IF . ( condition ) statement
    (               shift and go to state 59


state 21

    (2) statements -> statement statements .
    $end            reduce using rule 2 (statements -> statement statements .)
    }               reduce using rule 2 (statements -> statement statements .)


state 22

    (5) statement -> keyword_statement ; .
    {               reduce using rule 5 (statement -> keyword_statement ; .)
    RETURN          reduce using rule 5 (statement -> keyword_statement ; .)
    CONTINUE        reduce using rule 5 (statement -> keyword_statement ; .)
    BREAK           reduce using rule 5 (statement -> keyword_statement ; .)
    PRINT           reduce using rule 5 (statement -> keyword_statement ; .)
    ID              reduce using rule 5 (statement -> keyword_statement ; .)
    WHILE           reduce using rule 5 (statement -> keyword_statement ; .)
    FOR             reduce using rule 5 (statement -> keyword_statement ; .)
    IF              reduce using rule 5 (statement -> keyword_statement ; .)
    $end            reduce using rule 5 (statement -> keyword_statement ; .)
    }               reduce using rule 5 (statement -> keyword_statement ; .)
    ELSE            reduce using rule 5 (statement -> keyword_statement ; .)


state 23

    (6) statement -> print_statement ; .
    {               reduce using rule 6 (statement -> print_statement ; .)
    RETURN          reduce using rule 6 (statement -> print_statement ; .)
    CONTINUE        reduce using rule 6 (statement -> print_statement ; .)
    BREAK           reduce using rule 6 (statement -> print_statement ; .)
    PRINT           reduce using rule 6 (statement -> print_statement ; .)
    ID              reduce using rule 6 (statement -> print_statement ; .)
    WHILE           reduce using rule 6 (statement -> print_statement ; .)
    FOR             reduce using rule 6 (statement -> print_statement ; .)
    IF              reduce using rule 6 (statement -> print_statement ; .)
    $end            reduce using rule 6 (statement -> print_statement ; .)
    }               reduce using rule 6 (statement -> print_statement ; .)
    ELSE            reduce using rule 6 (statement -> print_statement ; .)


state 24

    (7) statement -> assignment ; .
    {               reduce using rule 7 (statement -> assignment ; .)
    RETURN          reduce using rule 7 (statement -> assignment ; .)
    CONTINUE        reduce using rule 7 (statement -> assignment ; .)
    BREAK           reduce using rule 7 (statement -> assignment ; .)
    PRINT           reduce using rule 7 (statement -> assignment ; .)
    ID              reduce using rule 7 (statement -> assignment ; .)
    WHILE           reduce using rule 7 (statement -> assignment ; .)
    FOR             reduce using rule 7 (statement -> assignment ; .)
    IF              reduce using rule 7 (statement -> assignment ; .)
    $end            reduce using rule 7 (statement -> assignment ; .)
    }               reduce using rule 7 (statement -> assignment ; .)
    ELSE            reduce using rule 7 (statement -> assignment ; .)


state 25

    (11) block -> { statements . }
    }               shift and go to state 60


state 26

    (30) keyword_statement -> RETURN expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 30 (keyword_statement -> RETURN expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 27

    (39) expr -> ( . expr )
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 69
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 28

    (40) expr -> - . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 70
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 29

    (41) expr -> matrix_expr .
    MATRIX_DIV      reduce using rule 41 (expr -> matrix_expr .)
    MATRIX_MUL      reduce using rule 41 (expr -> matrix_expr .)
    MATRIX_MINUS    reduce using rule 41 (expr -> matrix_expr .)
    MATRIX_PLUS     reduce using rule 41 (expr -> matrix_expr .)
    /               reduce using rule 41 (expr -> matrix_expr .)
    *               reduce using rule 41 (expr -> matrix_expr .)
    -               reduce using rule 41 (expr -> matrix_expr .)
    +               reduce using rule 41 (expr -> matrix_expr .)
    ;               reduce using rule 41 (expr -> matrix_expr .)
    )               reduce using rule 41 (expr -> matrix_expr .)
    NE              reduce using rule 41 (expr -> matrix_expr .)
    GT              reduce using rule 41 (expr -> matrix_expr .)
    GE              reduce using rule 41 (expr -> matrix_expr .)
    LT              reduce using rule 41 (expr -> matrix_expr .)
    LE              reduce using rule 41 (expr -> matrix_expr .)
    EQ              reduce using rule 41 (expr -> matrix_expr .)


state 30

    (42) expr -> arithmetic_expr .
    MATRIX_DIV      reduce using rule 42 (expr -> arithmetic_expr .)
    MATRIX_MUL      reduce using rule 42 (expr -> arithmetic_expr .)
    MATRIX_MINUS    reduce using rule 42 (expr -> arithmetic_expr .)
    MATRIX_PLUS     reduce using rule 42 (expr -> arithmetic_expr .)
    /               reduce using rule 42 (expr -> arithmetic_expr .)
    *               reduce using rule 42 (expr -> arithmetic_expr .)
    -               reduce using rule 42 (expr -> arithmetic_expr .)
    +               reduce using rule 42 (expr -> arithmetic_expr .)
    ;               reduce using rule 42 (expr -> arithmetic_expr .)
    )               reduce using rule 42 (expr -> arithmetic_expr .)
    NE              reduce using rule 42 (expr -> arithmetic_expr .)
    GT              reduce using rule 42 (expr -> arithmetic_expr .)
    GE              reduce using rule 42 (expr -> arithmetic_expr .)
    LT              reduce using rule 42 (expr -> arithmetic_expr .)
    LE              reduce using rule 42 (expr -> arithmetic_expr .)
    EQ              reduce using rule 42 (expr -> arithmetic_expr .)


state 31

    (43) expr -> term .
    MATRIX_DIV      reduce using rule 43 (expr -> term .)
    MATRIX_MUL      reduce using rule 43 (expr -> term .)
    MATRIX_MINUS    reduce using rule 43 (expr -> term .)
    MATRIX_PLUS     reduce using rule 43 (expr -> term .)
    /               reduce using rule 43 (expr -> term .)
    *               reduce using rule 43 (expr -> term .)
    -               reduce using rule 43 (expr -> term .)
    +               reduce using rule 43 (expr -> term .)
    ;               reduce using rule 43 (expr -> term .)
    )               reduce using rule 43 (expr -> term .)
    NE              reduce using rule 43 (expr -> term .)
    GT              reduce using rule 43 (expr -> term .)
    GE              reduce using rule 43 (expr -> term .)
    LT              reduce using rule 43 (expr -> term .)
    LE              reduce using rule 43 (expr -> term .)
    EQ              reduce using rule 43 (expr -> term .)


state 32

    (59) term -> ID .
    (60) term -> ID . TRANSPOSE
    (66) reference -> ID . list
    (56) list -> . [ terms ]
    MATRIX_DIV      reduce using rule 59 (term -> ID .)
    MATRIX_MUL      reduce using rule 59 (term -> ID .)
    MATRIX_MINUS    reduce using rule 59 (term -> ID .)
    MATRIX_PLUS     reduce using rule 59 (term -> ID .)
    /               reduce using rule 59 (term -> ID .)
    *               reduce using rule 59 (term -> ID .)
    -               reduce using rule 59 (term -> ID .)
    +               reduce using rule 59 (term -> ID .)
    ;               reduce using rule 59 (term -> ID .)
    ,               reduce using rule 59 (term -> ID .)
    )               reduce using rule 59 (term -> ID .)
    NE              reduce using rule 59 (term -> ID .)
    GT              reduce using rule 59 (term -> ID .)
    GE              reduce using rule 59 (term -> ID .)
    LT              reduce using rule 59 (term -> ID .)
    LE              reduce using rule 59 (term -> ID .)
    EQ              reduce using rule 59 (term -> ID .)
    ]               reduce using rule 59 (term -> ID .)
    TRANSPOSE       shift and go to state 71
    [               shift and go to state 42

    list                           shift and go to state 56

state 33

    (61) term -> MATRIX .
    (52) MATRIX -> MATRIX . TRANSPOSE
    MATRIX_DIV      reduce using rule 61 (term -> MATRIX .)
    MATRIX_MUL      reduce using rule 61 (term -> MATRIX .)
    MATRIX_MINUS    reduce using rule 61 (term -> MATRIX .)
    MATRIX_PLUS     reduce using rule 61 (term -> MATRIX .)
    /               reduce using rule 61 (term -> MATRIX .)
    *               reduce using rule 61 (term -> MATRIX .)
    -               reduce using rule 61 (term -> MATRIX .)
    +               reduce using rule 61 (term -> MATRIX .)
    ;               reduce using rule 61 (term -> MATRIX .)
    ,               reduce using rule 61 (term -> MATRIX .)
    )               reduce using rule 61 (term -> MATRIX .)
    NE              reduce using rule 61 (term -> MATRIX .)
    GT              reduce using rule 61 (term -> MATRIX .)
    GE              reduce using rule 61 (term -> MATRIX .)
    LT              reduce using rule 61 (term -> MATRIX .)
    LE              reduce using rule 61 (term -> MATRIX .)
    EQ              reduce using rule 61 (term -> MATRIX .)
    ]               reduce using rule 61 (term -> MATRIX .)
    TRANSPOSE       shift and go to state 72


state 34

    (62) term -> list .
    MATRIX_DIV      reduce using rule 62 (term -> list .)
    MATRIX_MUL      reduce using rule 62 (term -> list .)
    MATRIX_MINUS    reduce using rule 62 (term -> list .)
    MATRIX_PLUS     reduce using rule 62 (term -> list .)
    /               reduce using rule 62 (term -> list .)
    *               reduce using rule 62 (term -> list .)
    -               reduce using rule 62 (term -> list .)
    +               reduce using rule 62 (term -> list .)
    ;               reduce using rule 62 (term -> list .)
    ,               reduce using rule 62 (term -> list .)
    )               reduce using rule 62 (term -> list .)
    NE              reduce using rule 62 (term -> list .)
    GT              reduce using rule 62 (term -> list .)
    GE              reduce using rule 62 (term -> list .)
    LT              reduce using rule 62 (term -> list .)
    LE              reduce using rule 62 (term -> list .)
    EQ              reduce using rule 62 (term -> list .)
    ]               reduce using rule 62 (term -> list .)


state 35

    (63) term -> numeric .
    MATRIX_DIV      reduce using rule 63 (term -> numeric .)
    MATRIX_MUL      reduce using rule 63 (term -> numeric .)
    MATRIX_MINUS    reduce using rule 63 (term -> numeric .)
    MATRIX_PLUS     reduce using rule 63 (term -> numeric .)
    /               reduce using rule 63 (term -> numeric .)
    *               reduce using rule 63 (term -> numeric .)
    -               reduce using rule 63 (term -> numeric .)
    +               reduce using rule 63 (term -> numeric .)
    ;               reduce using rule 63 (term -> numeric .)
    ,               reduce using rule 63 (term -> numeric .)
    )               reduce using rule 63 (term -> numeric .)
    NE              reduce using rule 63 (term -> numeric .)
    GT              reduce using rule 63 (term -> numeric .)
    GE              reduce using rule 63 (term -> numeric .)
    LT              reduce using rule 63 (term -> numeric .)
    LE              reduce using rule 63 (term -> numeric .)
    EQ              reduce using rule 63 (term -> numeric .)
    ]               reduce using rule 63 (term -> numeric .)


state 36

    (64) term -> reference .
    MATRIX_DIV      reduce using rule 64 (term -> reference .)
    MATRIX_MUL      reduce using rule 64 (term -> reference .)
    MATRIX_MINUS    reduce using rule 64 (term -> reference .)
    MATRIX_PLUS     reduce using rule 64 (term -> reference .)
    /               reduce using rule 64 (term -> reference .)
    *               reduce using rule 64 (term -> reference .)
    -               reduce using rule 64 (term -> reference .)
    +               reduce using rule 64 (term -> reference .)
    ;               reduce using rule 64 (term -> reference .)
    ,               reduce using rule 64 (term -> reference .)
    )               reduce using rule 64 (term -> reference .)
    NE              reduce using rule 64 (term -> reference .)
    GT              reduce using rule 64 (term -> reference .)
    GE              reduce using rule 64 (term -> reference .)
    LT              reduce using rule 64 (term -> reference .)
    LE              reduce using rule 64 (term -> reference .)
    EQ              reduce using rule 64 (term -> reference .)
    ]               reduce using rule 64 (term -> reference .)


state 37

    (65) term -> STRING .
    MATRIX_DIV      reduce using rule 65 (term -> STRING .)
    MATRIX_MUL      reduce using rule 65 (term -> STRING .)
    MATRIX_MINUS    reduce using rule 65 (term -> STRING .)
    MATRIX_PLUS     reduce using rule 65 (term -> STRING .)
    /               reduce using rule 65 (term -> STRING .)
    *               reduce using rule 65 (term -> STRING .)
    -               reduce using rule 65 (term -> STRING .)
    +               reduce using rule 65 (term -> STRING .)
    ;               reduce using rule 65 (term -> STRING .)
    ,               reduce using rule 65 (term -> STRING .)
    )               reduce using rule 65 (term -> STRING .)
    NE              reduce using rule 65 (term -> STRING .)
    GT              reduce using rule 65 (term -> STRING .)
    GE              reduce using rule 65 (term -> STRING .)
    LT              reduce using rule 65 (term -> STRING .)
    LE              reduce using rule 65 (term -> STRING .)
    EQ              reduce using rule 65 (term -> STRING .)
    ]               reduce using rule 65 (term -> STRING .)


state 38

    (53) MATRIX -> ONES . ( INTEGER )
    (               shift and go to state 73


state 39

    (68) numeric -> INTEGER .
    MATRIX_DIV      reduce using rule 68 (numeric -> INTEGER .)
    MATRIX_MUL      reduce using rule 68 (numeric -> INTEGER .)
    MATRIX_MINUS    reduce using rule 68 (numeric -> INTEGER .)
    MATRIX_PLUS     reduce using rule 68 (numeric -> INTEGER .)
    /               reduce using rule 68 (numeric -> INTEGER .)
    *               reduce using rule 68 (numeric -> INTEGER .)
    -               reduce using rule 68 (numeric -> INTEGER .)
    +               reduce using rule 68 (numeric -> INTEGER .)
    ;               reduce using rule 68 (numeric -> INTEGER .)
    ,               reduce using rule 68 (numeric -> INTEGER .)
    )               reduce using rule 68 (numeric -> INTEGER .)
    NE              reduce using rule 68 (numeric -> INTEGER .)
    GT              reduce using rule 68 (numeric -> INTEGER .)
    GE              reduce using rule 68 (numeric -> INTEGER .)
    LT              reduce using rule 68 (numeric -> INTEGER .)
    LE              reduce using rule 68 (numeric -> INTEGER .)
    EQ              reduce using rule 68 (numeric -> INTEGER .)
    ]               reduce using rule 68 (numeric -> INTEGER .)


state 40

    (54) MATRIX -> ZEROS . ( INTEGER )
    (               shift and go to state 74


state 41

    (55) MATRIX -> EYE . ( INTEGER )
    (               shift and go to state 75


state 42

    (56) list -> [ . terms ]
    (57) terms -> . term , terms
    (58) terms -> . term
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    terms                          shift and go to state 76
    term                           shift and go to state 45
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 43

    (67) numeric -> FLOAT .
    MATRIX_DIV      reduce using rule 67 (numeric -> FLOAT .)
    MATRIX_MUL      reduce using rule 67 (numeric -> FLOAT .)
    MATRIX_MINUS    reduce using rule 67 (numeric -> FLOAT .)
    MATRIX_PLUS     reduce using rule 67 (numeric -> FLOAT .)
    /               reduce using rule 67 (numeric -> FLOAT .)
    *               reduce using rule 67 (numeric -> FLOAT .)
    -               reduce using rule 67 (numeric -> FLOAT .)
    +               reduce using rule 67 (numeric -> FLOAT .)
    ;               reduce using rule 67 (numeric -> FLOAT .)
    ,               reduce using rule 67 (numeric -> FLOAT .)
    )               reduce using rule 67 (numeric -> FLOAT .)
    NE              reduce using rule 67 (numeric -> FLOAT .)
    GT              reduce using rule 67 (numeric -> FLOAT .)
    GE              reduce using rule 67 (numeric -> FLOAT .)
    LT              reduce using rule 67 (numeric -> FLOAT .)
    LE              reduce using rule 67 (numeric -> FLOAT .)
    EQ              reduce using rule 67 (numeric -> FLOAT .)
    ]               reduce using rule 67 (numeric -> FLOAT .)


state 44

    (29) print_statement -> PRINT terms .
    ;               reduce using rule 29 (print_statement -> PRINT terms .)


state 45

    (57) terms -> term . , terms
    (58) terms -> term .
    ,               shift and go to state 77
    ;               reduce using rule 58 (terms -> term .)
    ]               reduce using rule 58 (terms -> term .)


state 46

    (14) assignment -> reference ASSIGN . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    reference                      shift and go to state 36
    expr                           shift and go to state 78
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35

state 47

    (15) assignment -> reference DIVIDE_BY . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    reference                      shift and go to state 36
    expr                           shift and go to state 79
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35

state 48

    (16) assignment -> reference MULTIPLY_BY . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    reference                      shift and go to state 36
    expr                           shift and go to state 80
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35

state 49

    (17) assignment -> reference SUBTRACT . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    reference                      shift and go to state 36
    expr                           shift and go to state 81
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35

state 50

    (18) assignment -> reference ADD . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    reference                      shift and go to state 36
    expr                           shift and go to state 82
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35

state 51

    (19) assignment -> ID ASSIGN . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 83
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 52

    (20) assignment -> ID DIVIDE_BY . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 84
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 53

    (21) assignment -> ID MULTIPLY_BY . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 85
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 54

    (22) assignment -> ID SUBTRACT . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 86
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 55

    (23) assignment -> ID ADD . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 87
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 56

    (66) reference -> ID list .
    ASSIGN          reduce using rule 66 (reference -> ID list .)
    DIVIDE_BY       reduce using rule 66 (reference -> ID list .)
    MULTIPLY_BY     reduce using rule 66 (reference -> ID list .)
    SUBTRACT        reduce using rule 66 (reference -> ID list .)
    ADD             reduce using rule 66 (reference -> ID list .)
    MATRIX_DIV      reduce using rule 66 (reference -> ID list .)
    MATRIX_MUL      reduce using rule 66 (reference -> ID list .)
    MATRIX_MINUS    reduce using rule 66 (reference -> ID list .)
    MATRIX_PLUS     reduce using rule 66 (reference -> ID list .)
    /               reduce using rule 66 (reference -> ID list .)
    *               reduce using rule 66 (reference -> ID list .)
    -               reduce using rule 66 (reference -> ID list .)
    +               reduce using rule 66 (reference -> ID list .)
    ;               reduce using rule 66 (reference -> ID list .)
    ,               reduce using rule 66 (reference -> ID list .)
    )               reduce using rule 66 (reference -> ID list .)
    NE              reduce using rule 66 (reference -> ID list .)
    GT              reduce using rule 66 (reference -> ID list .)
    GE              reduce using rule 66 (reference -> ID list .)
    LT              reduce using rule 66 (reference -> ID list .)
    LE              reduce using rule 66 (reference -> ID list .)
    EQ              reduce using rule 66 (reference -> ID list .)
    ]               reduce using rule 66 (reference -> ID list .)


state 57

    (28) while_loop -> WHILE ( . condition ) statement
    (33) condition -> . expr NE expr
    (34) condition -> . expr GT expr
    (35) condition -> . expr GE expr
    (36) condition -> . expr LT expr
    (37) condition -> . expr LE expr
    (38) condition -> . expr EQ expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    condition                      shift and go to state 88
    expr                           shift and go to state 89
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 58

    (24) for_loop -> FOR ID . ASSIGN range_expr statement
    ASSIGN          shift and go to state 90


state 59

    (12) if_statement -> IF ( . condition ) statement ELSE statement
    (13) if_statement -> IF ( . condition ) statement
    (33) condition -> . expr NE expr
    (34) condition -> . expr GT expr
    (35) condition -> . expr GE expr
    (36) condition -> . expr LT expr
    (37) condition -> . expr LE expr
    (38) condition -> . expr EQ expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    condition                      shift and go to state 91
    expr                           shift and go to state 89
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 60

    (11) block -> { statements } .
    {               reduce using rule 11 (block -> { statements } .)
    RETURN          reduce using rule 11 (block -> { statements } .)
    CONTINUE        reduce using rule 11 (block -> { statements } .)
    BREAK           reduce using rule 11 (block -> { statements } .)
    PRINT           reduce using rule 11 (block -> { statements } .)
    ID              reduce using rule 11 (block -> { statements } .)
    WHILE           reduce using rule 11 (block -> { statements } .)
    FOR             reduce using rule 11 (block -> { statements } .)
    IF              reduce using rule 11 (block -> { statements } .)
    $end            reduce using rule 11 (block -> { statements } .)
    }               reduce using rule 11 (block -> { statements } .)
    ELSE            reduce using rule 11 (block -> { statements } .)


state 61

    (48) matrix_expr -> expr MATRIX_DIV . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 92
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 62

    (49) matrix_expr -> expr MATRIX_MUL . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 93
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 63

    (50) matrix_expr -> expr MATRIX_MINUS . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 94
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 64

    (51) matrix_expr -> expr MATRIX_PLUS . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 95
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 65

    (44) arithmetic_expr -> expr / . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 96
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 66

    (45) arithmetic_expr -> expr * . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 97
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 67

    (46) arithmetic_expr -> expr - . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 98
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 68

    (47) arithmetic_expr -> expr + . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 99
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 69

    (39) expr -> ( expr . )
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               shift and go to state 100
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 70

    (40) expr -> - expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 40 (expr -> - expr .)
    MATRIX_MUL      reduce using rule 40 (expr -> - expr .)
    MATRIX_MINUS    reduce using rule 40 (expr -> - expr .)
    MATRIX_PLUS     reduce using rule 40 (expr -> - expr .)
    /               reduce using rule 40 (expr -> - expr .)
    *               reduce using rule 40 (expr -> - expr .)
    -               reduce using rule 40 (expr -> - expr .)
    +               reduce using rule 40 (expr -> - expr .)
    ;               reduce using rule 40 (expr -> - expr .)
    )               reduce using rule 40 (expr -> - expr .)
    NE              reduce using rule 40 (expr -> - expr .)
    GT              reduce using rule 40 (expr -> - expr .)
    GE              reduce using rule 40 (expr -> - expr .)
    LT              reduce using rule 40 (expr -> - expr .)
    LE              reduce using rule 40 (expr -> - expr .)
    EQ              reduce using rule 40 (expr -> - expr .)


state 71

    (60) term -> ID TRANSPOSE .
    MATRIX_DIV      reduce using rule 60 (term -> ID TRANSPOSE .)
    MATRIX_MUL      reduce using rule 60 (term -> ID TRANSPOSE .)
    MATRIX_MINUS    reduce using rule 60 (term -> ID TRANSPOSE .)
    MATRIX_PLUS     reduce using rule 60 (term -> ID TRANSPOSE .)
    /               reduce using rule 60 (term -> ID TRANSPOSE .)
    *               reduce using rule 60 (term -> ID TRANSPOSE .)
    -               reduce using rule 60 (term -> ID TRANSPOSE .)
    +               reduce using rule 60 (term -> ID TRANSPOSE .)
    ;               reduce using rule 60 (term -> ID TRANSPOSE .)
    ,               reduce using rule 60 (term -> ID TRANSPOSE .)
    )               reduce using rule 60 (term -> ID TRANSPOSE .)
    NE              reduce using rule 60 (term -> ID TRANSPOSE .)
    GT              reduce using rule 60 (term -> ID TRANSPOSE .)
    GE              reduce using rule 60 (term -> ID TRANSPOSE .)
    LT              reduce using rule 60 (term -> ID TRANSPOSE .)
    LE              reduce using rule 60 (term -> ID TRANSPOSE .)
    EQ              reduce using rule 60 (term -> ID TRANSPOSE .)
    ]               reduce using rule 60 (term -> ID TRANSPOSE .)


state 72

    (52) MATRIX -> MATRIX TRANSPOSE .
    TRANSPOSE       reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    MATRIX_DIV      reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    MATRIX_MUL      reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    MATRIX_MINUS    reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    MATRIX_PLUS     reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    /               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    *               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    -               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    +               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    ;               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    ,               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    )               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    NE              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    GT              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    GE              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    LT              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    LE              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    EQ              reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)
    ]               reduce using rule 52 (MATRIX -> MATRIX TRANSPOSE .)


state 73

    (53) MATRIX -> ONES ( . INTEGER )
    INTEGER         shift and go to state 101


state 74

    (54) MATRIX -> ZEROS ( . INTEGER )
    INTEGER         shift and go to state 102


state 75

    (55) MATRIX -> EYE ( . INTEGER )
    INTEGER         shift and go to state 103


state 76

    (56) list -> [ terms . ]
    ]               shift and go to state 104


state 77

    (57) terms -> term , . terms
    (57) terms -> . term , terms
    (58) terms -> . term
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    term                           shift and go to state 45
    terms                          shift and go to state 105
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 78

    (14) assignment -> reference ASSIGN expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 14 (assignment -> reference ASSIGN expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 79

    (15) assignment -> reference DIVIDE_BY expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 15 (assignment -> reference DIVIDE_BY expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 80

    (16) assignment -> reference MULTIPLY_BY expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 16 (assignment -> reference MULTIPLY_BY expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 81

    (17) assignment -> reference SUBTRACT expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 17 (assignment -> reference SUBTRACT expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 82

    (18) assignment -> reference ADD expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 18 (assignment -> reference ADD expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 83

    (19) assignment -> ID ASSIGN expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 19 (assignment -> ID ASSIGN expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 84

    (20) assignment -> ID DIVIDE_BY expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 20 (assignment -> ID DIVIDE_BY expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 85

    (21) assignment -> ID MULTIPLY_BY expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 21 (assignment -> ID MULTIPLY_BY expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 86

    (22) assignment -> ID SUBTRACT expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 22 (assignment -> ID SUBTRACT expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 87

    (23) assignment -> ID ADD expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    ;               reduce using rule 23 (assignment -> ID ADD expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 88

    (28) while_loop -> WHILE ( condition . ) statement
    )               shift and go to state 106


state 89

    (33) condition -> expr . NE expr
    (34) condition -> expr . GT expr
    (35) condition -> expr . GE expr
    (36) condition -> expr . LT expr
    (37) condition -> expr . LE expr
    (38) condition -> expr . EQ expr
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    NE              shift and go to state 107
    GT              shift and go to state 108
    GE              shift and go to state 109
    LT              shift and go to state 110
    LE              shift and go to state 111
    EQ              shift and go to state 112
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 90

    (24) for_loop -> FOR ID ASSIGN . range_expr statement
    (25) range_expr -> . INTEGER RANGE ID
    (26) range_expr -> . ID RANGE ID
    (27) range_expr -> . INTEGER RANGE INTEGER
    INTEGER         shift and go to state 115
    ID              shift and go to state 113

    range_expr                     shift and go to state 114

state 91

    (12) if_statement -> IF ( condition . ) statement ELSE statement
    (13) if_statement -> IF ( condition . ) statement
    )               shift and go to state 116


state 92

    (48) matrix_expr -> expr MATRIX_DIV expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_MUL      reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_MINUS    reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    MATRIX_PLUS     reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    /               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    *               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    -               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    +               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    ;               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    )               reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    NE              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    GT              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    GE              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    LT              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    LE              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)
    EQ              reduce using rule 48 (matrix_expr -> expr MATRIX_DIV expr .)


state 93

    (49) matrix_expr -> expr MATRIX_MUL expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_DIV      reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_MUL      reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_MINUS    reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    MATRIX_PLUS     reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    /               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    *               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    -               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    +               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    ;               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    )               reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    NE              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    GT              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    GE              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    LT              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    LE              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)
    EQ              reduce using rule 49 (matrix_expr -> expr MATRIX_MUL expr .)


state 94

    (50) matrix_expr -> expr MATRIX_MINUS expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    MATRIX_PLUS     reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    -               reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    +               reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    ;               reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    )               reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    NE              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    GT              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    GE              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    LT              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    LE              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    EQ              reduce using rule 50 (matrix_expr -> expr MATRIX_MINUS expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 95

    (51) matrix_expr -> expr MATRIX_PLUS expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    MATRIX_PLUS     reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    -               reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    +               reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    ;               reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    )               reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    NE              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    GT              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    GE              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    LT              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    LE              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    EQ              reduce using rule 51 (matrix_expr -> expr MATRIX_PLUS expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    /               shift and go to state 65
    *               shift and go to state 66


state 96

    (44) arithmetic_expr -> expr / expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 44 (arithmetic_expr -> expr / expr .)
    MATRIX_PLUS     reduce using rule 44 (arithmetic_expr -> expr / expr .)
    /               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    *               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    -               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    +               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    ;               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    )               reduce using rule 44 (arithmetic_expr -> expr / expr .)
    NE              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    GT              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    GE              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    LT              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    LE              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    EQ              reduce using rule 44 (arithmetic_expr -> expr / expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62


state 97

    (45) arithmetic_expr -> expr * expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    MATRIX_MINUS    reduce using rule 45 (arithmetic_expr -> expr * expr .)
    MATRIX_PLUS     reduce using rule 45 (arithmetic_expr -> expr * expr .)
    /               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    *               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    -               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    +               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    ;               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    )               reduce using rule 45 (arithmetic_expr -> expr * expr .)
    NE              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    GT              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    GE              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    LT              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    LE              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    EQ              reduce using rule 45 (arithmetic_expr -> expr * expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62


state 98

    (46) arithmetic_expr -> expr - expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    -               reduce using rule 46 (arithmetic_expr -> expr - expr .)
    +               reduce using rule 46 (arithmetic_expr -> expr - expr .)
    ;               reduce using rule 46 (arithmetic_expr -> expr - expr .)
    )               reduce using rule 46 (arithmetic_expr -> expr - expr .)
    NE              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    GT              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    GE              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    LT              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    LE              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    EQ              reduce using rule 46 (arithmetic_expr -> expr - expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 99

    (47) arithmetic_expr -> expr + expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    -               reduce using rule 47 (arithmetic_expr -> expr + expr .)
    +               reduce using rule 47 (arithmetic_expr -> expr + expr .)
    ;               reduce using rule 47 (arithmetic_expr -> expr + expr .)
    )               reduce using rule 47 (arithmetic_expr -> expr + expr .)
    NE              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    GT              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    GE              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    LT              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    LE              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    EQ              reduce using rule 47 (arithmetic_expr -> expr + expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66


state 100

    (39) expr -> ( expr ) .
    MATRIX_DIV      reduce using rule 39 (expr -> ( expr ) .)
    MATRIX_MUL      reduce using rule 39 (expr -> ( expr ) .)
    MATRIX_MINUS    reduce using rule 39 (expr -> ( expr ) .)
    MATRIX_PLUS     reduce using rule 39 (expr -> ( expr ) .)
    /               reduce using rule 39 (expr -> ( expr ) .)
    *               reduce using rule 39 (expr -> ( expr ) .)
    -               reduce using rule 39 (expr -> ( expr ) .)
    +               reduce using rule 39 (expr -> ( expr ) .)
    ;               reduce using rule 39 (expr -> ( expr ) .)
    )               reduce using rule 39 (expr -> ( expr ) .)
    NE              reduce using rule 39 (expr -> ( expr ) .)
    GT              reduce using rule 39 (expr -> ( expr ) .)
    GE              reduce using rule 39 (expr -> ( expr ) .)
    LT              reduce using rule 39 (expr -> ( expr ) .)
    LE              reduce using rule 39 (expr -> ( expr ) .)
    EQ              reduce using rule 39 (expr -> ( expr ) .)


state 101

    (53) MATRIX -> ONES ( INTEGER . )
    )               shift and go to state 117


state 102

    (54) MATRIX -> ZEROS ( INTEGER . )
    )               shift and go to state 118


state 103

    (55) MATRIX -> EYE ( INTEGER . )
    )               shift and go to state 119


state 104

    (56) list -> [ terms ] .
    MATRIX_DIV      reduce using rule 56 (list -> [ terms ] .)
    MATRIX_MUL      reduce using rule 56 (list -> [ terms ] .)
    MATRIX_MINUS    reduce using rule 56 (list -> [ terms ] .)
    MATRIX_PLUS     reduce using rule 56 (list -> [ terms ] .)
    /               reduce using rule 56 (list -> [ terms ] .)
    *               reduce using rule 56 (list -> [ terms ] .)
    -               reduce using rule 56 (list -> [ terms ] .)
    +               reduce using rule 56 (list -> [ terms ] .)
    ;               reduce using rule 56 (list -> [ terms ] .)
    ,               reduce using rule 56 (list -> [ terms ] .)
    ASSIGN          reduce using rule 56 (list -> [ terms ] .)
    DIVIDE_BY       reduce using rule 56 (list -> [ terms ] .)
    MULTIPLY_BY     reduce using rule 56 (list -> [ terms ] .)
    SUBTRACT        reduce using rule 56 (list -> [ terms ] .)
    ADD             reduce using rule 56 (list -> [ terms ] .)
    )               reduce using rule 56 (list -> [ terms ] .)
    NE              reduce using rule 56 (list -> [ terms ] .)
    GT              reduce using rule 56 (list -> [ terms ] .)
    GE              reduce using rule 56 (list -> [ terms ] .)
    LT              reduce using rule 56 (list -> [ terms ] .)
    LE              reduce using rule 56 (list -> [ terms ] .)
    EQ              reduce using rule 56 (list -> [ terms ] .)
    ]               reduce using rule 56 (list -> [ terms ] .)


state 105

    (57) terms -> term , terms .
    ;               reduce using rule 57 (terms -> term , terms .)
    ]               reduce using rule 57 (terms -> term , terms .)


state 106

    (28) while_loop -> WHILE ( condition ) . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 120
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 107

    (33) condition -> expr NE . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 121
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 108

    (34) condition -> expr GT . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 122
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 109

    (35) condition -> expr GE . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 123
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 110

    (36) condition -> expr LT . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 124
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 111

    (37) condition -> expr LE . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 125
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 112

    (38) condition -> expr EQ . expr
    (39) expr -> . ( expr )
    (40) expr -> . - expr
    (41) expr -> . matrix_expr
    (42) expr -> . arithmetic_expr
    (43) expr -> . term
    (48) matrix_expr -> . expr MATRIX_DIV expr
    (49) matrix_expr -> . expr MATRIX_MUL expr
    (50) matrix_expr -> . expr MATRIX_MINUS expr
    (51) matrix_expr -> . expr MATRIX_PLUS expr
    (44) arithmetic_expr -> . expr / expr
    (45) arithmetic_expr -> . expr * expr
    (46) arithmetic_expr -> . expr - expr
    (47) arithmetic_expr -> . expr + expr
    (59) term -> . ID
    (60) term -> . ID TRANSPOSE
    (61) term -> . MATRIX
    (62) term -> . list
    (63) term -> . numeric
    (64) term -> . reference
    (65) term -> . STRING
    (52) MATRIX -> . MATRIX TRANSPOSE
    (53) MATRIX -> . ONES ( INTEGER )
    (54) MATRIX -> . ZEROS ( INTEGER )
    (55) MATRIX -> . EYE ( INTEGER )
    (56) list -> . [ terms ]
    (67) numeric -> . FLOAT
    (68) numeric -> . INTEGER
    (66) reference -> . ID list
    (               shift and go to state 27
    -               shift and go to state 28
    ID              shift and go to state 32
    STRING          shift and go to state 37
    ONES            shift and go to state 38
    ZEROS           shift and go to state 40
    EYE             shift and go to state 41
    [               shift and go to state 42
    FLOAT           shift and go to state 43
    INTEGER         shift and go to state 39

    expr                           shift and go to state 126
    matrix_expr                    shift and go to state 29
    arithmetic_expr                shift and go to state 30
    term                           shift and go to state 31
    MATRIX                         shift and go to state 33
    list                           shift and go to state 34
    numeric                        shift and go to state 35
    reference                      shift and go to state 36

state 113

    (26) range_expr -> ID . RANGE ID
    RANGE           shift and go to state 127


state 114

    (24) for_loop -> FOR ID ASSIGN range_expr . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 128
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 115

    (25) range_expr -> INTEGER . RANGE ID
    (27) range_expr -> INTEGER . RANGE INTEGER
    RANGE           shift and go to state 129


state 116

    (12) if_statement -> IF ( condition ) . statement ELSE statement
    (13) if_statement -> IF ( condition ) . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 130
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 117

    (53) MATRIX -> ONES ( INTEGER ) .
    TRANSPOSE       reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    MATRIX_DIV      reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    MATRIX_MUL      reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    MATRIX_MINUS    reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    MATRIX_PLUS     reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    /               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    *               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    -               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    +               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    ;               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    ,               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    )               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    NE              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    GT              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    GE              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    LT              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    LE              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    EQ              reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)
    ]               reduce using rule 53 (MATRIX -> ONES ( INTEGER ) .)


state 118

    (54) MATRIX -> ZEROS ( INTEGER ) .
    TRANSPOSE       reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    MATRIX_DIV      reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    MATRIX_MUL      reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    MATRIX_MINUS    reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    MATRIX_PLUS     reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    /               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    *               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    -               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    +               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    ;               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    ,               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    )               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    NE              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    GT              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    GE              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    LT              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    LE              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    EQ              reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)
    ]               reduce using rule 54 (MATRIX -> ZEROS ( INTEGER ) .)


state 119

    (55) MATRIX -> EYE ( INTEGER ) .
    TRANSPOSE       reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    MATRIX_DIV      reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    MATRIX_MUL      reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    MATRIX_MINUS    reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    MATRIX_PLUS     reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    /               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    *               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    -               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    +               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    ;               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    ,               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    )               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    NE              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    GT              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    GE              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    LT              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    LE              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    EQ              reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)
    ]               reduce using rule 55 (MATRIX -> EYE ( INTEGER ) .)


state 120

    (28) while_loop -> WHILE ( condition ) statement .
    {               reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    RETURN          reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    CONTINUE        reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    BREAK           reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    PRINT           reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    ID              reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    WHILE           reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    FOR             reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    IF              reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    $end            reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    }               reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)
    ELSE            reduce using rule 28 (while_loop -> WHILE ( condition ) statement .)


state 121

    (33) condition -> expr NE expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 33 (condition -> expr NE expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 122

    (34) condition -> expr GT expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 34 (condition -> expr GT expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 123

    (35) condition -> expr GE expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 35 (condition -> expr GE expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 124

    (36) condition -> expr LT expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 36 (condition -> expr LT expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 125

    (37) condition -> expr LE expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 37 (condition -> expr LE expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 126

    (38) condition -> expr EQ expr .
    (48) matrix_expr -> expr . MATRIX_DIV expr
    (49) matrix_expr -> expr . MATRIX_MUL expr
    (50) matrix_expr -> expr . MATRIX_MINUS expr
    (51) matrix_expr -> expr . MATRIX_PLUS expr
    (44) arithmetic_expr -> expr . / expr
    (45) arithmetic_expr -> expr . * expr
    (46) arithmetic_expr -> expr . - expr
    (47) arithmetic_expr -> expr . + expr
    )               reduce using rule 38 (condition -> expr EQ expr .)
    MATRIX_DIV      shift and go to state 61
    MATRIX_MUL      shift and go to state 62
    MATRIX_MINUS    shift and go to state 63
    MATRIX_PLUS     shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 127

    (26) range_expr -> ID RANGE . ID
    ID              shift and go to state 131


state 128

    (24) for_loop -> FOR ID ASSIGN range_expr statement .
    {               reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    RETURN          reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    CONTINUE        reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    BREAK           reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    PRINT           reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    ID              reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    WHILE           reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    FOR             reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    IF              reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    $end            reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    }               reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)
    ELSE            reduce using rule 24 (for_loop -> FOR ID ASSIGN range_expr statement .)


state 129

    (25) range_expr -> INTEGER RANGE . ID
    (27) range_expr -> INTEGER RANGE . INTEGER
    ID              shift and go to state 133
    INTEGER         shift and go to state 132


state 130

    (12) if_statement -> IF ( condition ) statement . ELSE statement
    (13) if_statement -> IF ( condition ) statement .
    ELSE            shift and go to state 134
    {               reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    RETURN          reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    CONTINUE        reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    BREAK           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    PRINT           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    ID              reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    WHILE           reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    FOR             reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    IF              reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    $end            reduce using rule 13 (if_statement -> IF ( condition ) statement .)
    }               reduce using rule 13 (if_statement -> IF ( condition ) statement .)


state 131

    (26) range_expr -> ID RANGE ID .
    {               reduce using rule 26 (range_expr -> ID RANGE ID .)
    RETURN          reduce using rule 26 (range_expr -> ID RANGE ID .)
    CONTINUE        reduce using rule 26 (range_expr -> ID RANGE ID .)
    BREAK           reduce using rule 26 (range_expr -> ID RANGE ID .)
    PRINT           reduce using rule 26 (range_expr -> ID RANGE ID .)
    ID              reduce using rule 26 (range_expr -> ID RANGE ID .)
    WHILE           reduce using rule 26 (range_expr -> ID RANGE ID .)
    FOR             reduce using rule 26 (range_expr -> ID RANGE ID .)
    IF              reduce using rule 26 (range_expr -> ID RANGE ID .)


state 132

    (27) range_expr -> INTEGER RANGE INTEGER .
    {               reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    RETURN          reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    CONTINUE        reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    BREAK           reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    PRINT           reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    ID              reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    WHILE           reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    FOR             reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)
    IF              reduce using rule 27 (range_expr -> INTEGER RANGE INTEGER .)


state 133

    (25) range_expr -> INTEGER RANGE ID .
    {               reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    RETURN          reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    CONTINUE        reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    BREAK           reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    PRINT           reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    ID              reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    WHILE           reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    FOR             reduce using rule 25 (range_expr -> INTEGER RANGE ID .)
    IF              reduce using rule 25 (range_expr -> INTEGER RANGE ID .)


state 134

    (12) if_statement -> IF ( condition ) statement ELSE . statement
    (4) statement -> . block
    (5) statement -> . keyword_statement ;
    (6) statement -> . print_statement ;
    (7) statement -> . assignment ;
    (8) statement -> . while_loop
    (9) statement -> . for_loop
    (10) statement -> . if_statement
    (11) block -> . { statements }
    (30) keyword_statement -> . RETURN expr
    (31) keyword_statement -> . CONTINUE
    (32) keyword_statement -> . BREAK
    (29) print_statement -> . PRINT terms
    (14) assignment -> . reference ASSIGN expr
    (15) assignment -> . reference DIVIDE_BY expr
    (16) assignment -> . reference MULTIPLY_BY expr
    (17) assignment -> . reference SUBTRACT expr
    (18) assignment -> . reference ADD expr
    (19) assignment -> . ID ASSIGN expr
    (20) assignment -> . ID DIVIDE_BY expr
    (21) assignment -> . ID MULTIPLY_BY expr
    (22) assignment -> . ID SUBTRACT expr
    (23) assignment -> . ID ADD expr
    (28) while_loop -> . WHILE ( condition ) statement
    (24) for_loop -> . FOR ID ASSIGN range_expr statement
    (12) if_statement -> . IF ( condition ) statement ELSE statement
    (13) if_statement -> . IF ( condition ) statement
    (66) reference -> . ID list
    {               shift and go to state 11
    RETURN          shift and go to state 12
    CONTINUE        shift and go to state 13
    BREAK           shift and go to state 14
    PRINT           shift and go to state 15
    ID              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    IF              shift and go to state 20

    statement                      shift and go to state 135
    block                          shift and go to state 4
    keyword_statement              shift and go to state 5
    print_statement                shift and go to state 6
    assignment                     shift and go to state 7
    while_loop                     shift and go to state 8
    for_loop                       shift and go to state 9
    if_statement                   shift and go to state 10
    reference                      shift and go to state 16

state 135

    (12) if_statement -> IF ( condition ) statement ELSE statement .
    {               reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    RETURN          reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    CONTINUE        reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    BREAK           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    PRINT           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    ID              reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    WHILE           reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    FOR             reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    IF              reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    $end            reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    }               reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
    ELSE            reduce using rule 12 (if_statement -> IF ( condition ) statement ELSE statement .)
